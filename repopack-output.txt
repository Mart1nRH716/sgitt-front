This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-02T03:17:56.340Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
dev
next.config.mjs
package.json
postcss.config.mjs
public/next.svg
public/vercel.svg
README.md
src/app/admin/page.tsx
src/app/ayuda/page.tsx
src/app/chat/page.tsx
src/app/globals.css
src/app/home/page.tsx
src/app/layout.tsx
src/app/login/page.tsx
src/app/page.tsx
src/app/perfil/mispropuestas/page.tsx
src/app/perfil/page.tsx
src/app/propuesta/crear/page.tsx
src/app/registro/page.tsx
src/app/utils/adminApi.ts
src/app/utils/api.ts
src/app/utils/authService.ts
src/app/verify-email/[token]/page.tsx
src/components/Buscador.tsx
src/components/ChartAdmin.tsx
src/components/Chat/ChatRoom.tsx
src/components/Chat/ConversationList.tsx
src/components/Chat/CreateChatDialog.tsx
src/components/Chat/SearchInput.tsx
src/components/ConfirmDeleteModal.tsx
src/components/CrearPropuesta.tsx
src/components/EditarPerfilModal.tsx
src/components/EditarPropuestaModal.tsx
src/components/Footer.tsx
src/components/HeaderAdmin.tsx
src/components/HelpCenter.tsx
src/components/InfoAdmin.tsx
src/components/Landing.tsx
src/components/Layout.tsx
src/components/Login.tsx
src/components/MainAdmin.tsx
src/components/MainProfile.tsx
src/components/MisPropuestas.tsx
src/components/NabVar.tsx
src/components/Navbar.tsx
src/components/NavBarProfile.tsx
src/components/PropuestaDiv.tsx
src/components/Registro.tsx
src/components/SideBar.tsx
src/components/SideBarAdmin.tsx
src/components/SideBarProfile.tsx
src/components/TablesAdmin.tsx
src/components/ValorDiv.tsx
src/utils/propuestas.tsx
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: dev
================
ALLUSERSPROFILE=C:\ProgramData
APPDATA=C:\Users\tosca\AppData\Roaming
CHOCOLATEYINSTALL=C:\ProgramData\chocolatey
CHOCOLATEYLASTPATHUPDATE=133335922299416935
CHROME_CRASHPAD_PIPE_NAME=\\.\pipe\crashpad_12944_VZAPXRXTBPRNPWJN
COMMONPROGRAMFILES=C:\Program Files\Common Files
COMMONPROGRAMFILES(X86)=C:\Program Files (x86)\Common Files
COMMONPROGRAMW6432=C:\Program Files\Common Files
COMPUTERNAME=DESKTOP-ET46S29
COMSPEC=C:\Windows\system32\cmd.exe
DRIVERDATA=C:\Windows\System32\Drivers\DriverData
FPS_BROWSER_APP_PROFILE_STRING=Internet Explorer
FPS_BROWSER_USER_PROFILE_STRING=Default
HOMEDRIVE=C:
HOMEPATH=\Users\tosca
JAVA_HOME=C:\Program Files\Java
LATTICE=C:\lscc\diamond\3.12\license\license.dat
LATTICE_INI_PATH=C:\lsc_env
LM_LICENSE_FILE=C:\lscc\diamond\3.12\license\license.dat;
LOCALAPPDATA=C:\Users\tosca\AppData\Local
LOGONSERVER=\\DESKTOP-ET46S29
NUMBER_OF_PROCESSORS=8
ONEDRIVE=C:\Users\tosca\OneDrive
ORIGINAL_XDG_CURRENT_DESKTOP=undefined
OS=Windows_NT
PATH=C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Python311\Scripts\;C:\Program Files\Python311\;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\ProgramData\chocolatey\bin;C:\Program Files\nodejs;C:\php;C:\ProgramData\ComposerSetup\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\nodejs\;C:\Program Files\Java\bin;C:\Program Files\PuTTY\;C:\Users\tosca\.console-ninja\.bin;C:\Users\tosca\miniconda3;C:\Users\tosca\miniconda3\Library\mingw-w64\bin;C:\Users\tosca\miniconda3\Library\usr\bin;C:\Users\tosca\miniconda3\Library\bin;C:\Users\tosca\miniconda3\Scripts;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\tosca\AppData\Local\Microsoft\WindowsApps;C:\Users\tosca\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\Python311\Scripts\;C:\Program Files\Python311\;C:\Users\tosca\AppData\Roaming\Python\Python311\Scripts\;C:\Users\tosca\AppData\Roaming\Python\Python311\;C:\Users\tosca\AppData\Roaming\Composer\vendor\bin;C:\Users\tosca\AppData\Local\GitHubDesktop\bin;C:\Users\tosca\AppData\Roaming\npm
PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL
PROCESSOR_ARCHITECTURE=AMD64
PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 140 Stepping 1, GenuineIntel
PROCESSOR_LEVEL=6
PROCESSOR_REVISION=8c01
PROGRAMDATA=C:\ProgramData
PROGRAMFILES=C:\Program Files
PROGRAMFILES(X86)=C:\Program Files (x86)
PROGRAMW6432=C:\Program Files
PSMODULEPATH=C:\Users\tosca\OneDrive - Instituto Politecnico Nacional\Documents\WindowsPowerShell\Modules;C:\Program Files\WindowsPowerShell\Modules;C:\Windows\system32\WindowsPowerShell\v1.0\Modules
PT8HOME=C:\Program Files\Cisco Packet Tracer 8.2.1
PUBLIC=C:\Users\Public
SESSIONNAME=Console
SYSTEMDRIVE=C:
SYSTEMROOT=C:\Windows
TEMP=C:\Users\tosca\AppData\Local\Temp
TMP=C:\Users\tosca\AppData\Local\Temp
USERDOMAIN=DESKTOP-ET46S29
USERDOMAIN_ROAMINGPROFILE=DESKTOP-ET46S29
USERNAME=tosca
USERPROFILE=C:\Users\tosca
VBOX_MSI_INSTALL_PATH=C:\Program Files\Oracle\VirtualBox\
WINDIR=C:\Windows
ZES_ENABLE_SYSMAN=1
TERM_PROGRAM=vscode
TERM_PROGRAM_VERSION=1.94.2
LANG=en_US.UTF-8
COLORTERM=truecolor
GIT_ASKPASS=c:\Users\tosca\AppData\Local\Programs\Microsoft VS Code\resources\app\extensions\git\dist\askpass.sh
VSCODE_GIT_ASKPASS_NODE=C:\Users\tosca\AppData\Local\Programs\Microsoft VS Code\Code.exe
VSCODE_GIT_ASKPASS_EXTRA_ARGS=
VSCODE_GIT_ASKPASS_MAIN=c:\Users\tosca\AppData\Local\Programs\Microsoft VS Code\resources\app\extensions\git\dist\askpass-main.js
VSCODE_GIT_IPC_HANDLE=\\.\pipe\vscode-git-a3c9ec4a18-sock
VSCODE_INJECTION=1

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "sgitt-front",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@formkit/auto-animate": "^0.8.2",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@types/lodash": "^4.17.12",
    "axios": "^1.7.7",
    "bootstrap": "^5.3.3",
    "emoji-picker-react": "^4.12.0",
    "framer-motion": "^11.11.8",
    "lodash": "^4.17.21",
    "lottie-react": "^2.4.0",
    "lucide-react": "^0.439.0",
    "next": "14.2.3",
    "package": "^1.0.1",
    "react": "^18",
    "react-apexcharts": "^1.4.1",
    "react-bootstrap": "^2.10.2",
    "react-cookie": "^7.2.1",
    "react-dom": "^18",
    "react-icons": "^5.3.0",
    "socket.io-client": "^4.8.0",
    "zustand": "^5.0.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "daisyui": "^4.12.13",
    "eslint": "^8",
    "eslint-config-next": "14.2.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

================
File: README.md
================
# Proyecto de Gestión de Propuestas

## Descripción

Este proyecto es una aplicación web de gestión de propuestas que permite a los usuarios buscar, ver y contactar sobre diferentes propuestas disponibles. Está diseñado para facilitar el acceso a información detallada sobre las propuestas y mejorar la experiencia del usuario mediante una interfaz intuitiva y amigable.

## Características

- **Búsqueda de Propuestas**: Los usuarios pueden buscar propuestas específicas utilizando un término de búsqueda. La búsqueda ignora acentos para facilitar la experiencia.
- **Visualización de Detalles**: Al hacer clic en una tarjeta de propuesta, se muestra información detallada sobre la propuesta seleccionada en un panel a la derecha.
- **Paginación**: Las propuestas se presentan en un formato paginado, mostrando 4 propuestas por página.
- **Mensajes de Estado**: Se muestran mensajes apropiados cuando no hay resultados disponibles, incluyendo un ícono de tiburón triste.
- **Cierre de Detalles**: Los usuarios pueden cerrar la vista de detalles de la propuesta seleccionada con un botón de "X".

## Tecnologías Utilizadas

- **Frontend**: React.js
- **Estilos**: Tailwind CSS
- **Gestión de Estado**: React Hooks
- **Iconos**: react-icons

## Instalación

Para instalar y ejecutar el proyecto localmente, sigue estos pasos:

1. Clona el repositorio:

================
File: src/app/admin/page.tsx
================
'use client';
import MainAdmin from '@/components/MainAdmin';
import SideBarAdmin from '@/components/SideBarAdmin';
import React from 'react';

const AdminPage = () => {

    const [isOpen, setIsOpen] = React.useState(true);
    const toggleSideBar = () => {
        setIsOpen(!isOpen);
    };

    return (
    <div className="flex h-screen">
        <SideBarAdmin isOpen={isOpen} toggleSideBar={toggleSideBar} />
        <div className={`flex-1 transition-all duration-300 ${isOpen ? "ml-52" : "ml-20"}`}>
            <MainAdmin />
        </div>
    </div>
  );
}

export default AdminPage;

================
File: src/app/ayuda/page.tsx
================
'use client';
import Layout from '@/components/Layout';
import HelpCenter from '@/components/HelpCenter';

export default function AyudaPage() {
  return (
    <Layout>
      <HelpCenter />
    </Layout>
  );
}

================
File: src/app/chat/page.tsx
================
'use client';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import ConversationList from '@/components/Chat/ConversationList';
import ChatRoom from '@/components/Chat/ChatRoom';
import CreateChatDialog from '@/components/Chat/CreateChatDialog';
import { Plus } from 'lucide-react';
import Link from 'next/link';

interface Conversation {
  id: number;
  name: string;
  participants: any[];
  is_group: boolean;
}

const ChatPage = () => {
  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      router.push('/login');
    }
  }, [router]);

  return (
    <div className="flex flex-col h-screen bg-gray-100">
      {/* Chat Container */}
      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar */}
        <div className="w-80 bg-white border-r flex flex-col">
          {/* Sidebar Header */}
          <div className="p-4 border-b flex items-center bg-white">
            <Link href="/home" className="flex items-center gap-2 hover:opacity-80">
              <h1 className="text-xl font-bold text-oscure">
                SGI<span className="text-secondary">TT</span>
              </h1>
            </Link>
            <h1 className="text-xl font-semibold ml-2">| Chat</h1>
            <button
              onClick={() => setIsCreateDialogOpen(true)}
              className="ml-auto p-2 hover:bg-gray-100 rounded-full transition-colors"
              title="Nueva conversación"
            >
              <Plus className="w-5 h-5" />
            </button>
          </div>

          {/* Conversations List */}
          <div className="flex-1 overflow-y-auto">
            <ConversationList
              onSelectConversation={setSelectedConversation}
              selectedConversation={selectedConversation}
            />
          </div>
        </div>

        {/* Main Chat Area */}
        <div className="flex-1 flex">
          {selectedConversation ? (
            <ChatRoom conversation={selectedConversation} />
          ) : (
            <div className="flex-1 flex items-center justify-center bg-gray-50">
              <div className="text-center text-gray-500">
                <h2 className="text-xl font-semibold mb-2">Bienvenido al chat</h2>
                <p>Selecciona una conversación para comenzar</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Create Chat Dialog */}
      <CreateChatDialog
        isOpen={isCreateDialogOpen}
        onClose={() => setIsCreateDialogOpen(false)}
        onConversationCreated={() => {
          setIsCreateDialogOpen(false);
          // Aquí podrías actualizar la lista de conversaciones
        }}
      />

      {/* Footer */}
      <div className="bg-white border-t py-2 px-4 text-center text-sm text-gray-500">
        © 2024 SGITT. Todos los derechos reservados.
      </div>
    </div>
  );
};

export default ChatPage;

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Definir paleta de colores */
:root {
  --primary: #219ebc;
  --secondary: #8ecae6;
  --oscure: #023047;
  --help1: #FFD700;
  --help2: #FF8500;
}

li {
  list-style-type: none;
  cursor: pointer;
  position: relative;
}

li:hover::before {
  position: absolute;
  content: '';
  height: 3px;
  width: 100%;
  /* background: var(--secondary); */
  right: 0;
  bottom: -10px;
  color: var(--primary);
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.animate-fadeIn {
  animation: fadeIn 0.2s ease-in-out;
}

.icon{
  cursor: pointer;
}


.sidebar-menu a{
    @apply flex items-center gap-4 py-2 px-3 hover:bg-help3 font-medium text-lg border-l-4 border-transparent whitespace-nowrap; /* Utilidades de Tailwind */
}
.sidebar-menu .active{
    @apply border-primary bg-help3 text-primary; /* Utilidades de Tailwind */
}
.sidebar-menu-icon{
    @apply text-3xl; /* Utilidades de Tailwind */
}
.sidebar-dropdown{
    @apply font-normal; /* Utilidades de Tailwind */
}
.sidebar-collapse {
    @apply md:w-16 -left-full md:left-0; /* Utilidades de Tailwind */
}
.tab-indicator > *{
    @apply pb-1 border-b-4 border-transparent font-medium text-lg text-gray-500; /* Utilidades de Tailwind */
}
.tab-indicator .active{
    @apply border-primary text-primary; /* Utilidades de Tailwind */
}

.table-title {
    @apply font-bold text-primary text-xl mb-2 uppercase; /* Utilidades de Tailwind */
}

/*
.card{
  background: var(--oscure);
} */

================
File: src/app/home/page.tsx
================
// Home.tsx
'use client'; // Esto marca el componente como Client Component
import React, { useState } from 'react';
import Buscador from "@/components/Buscador";
import Footer from "@/components/Footer";
import NabVar from "@/components/NabVar";
import PropuestaDiv from "@/components/PropuestaDiv";
import Layout from '@/components/Layout';

const Home = () => {
  const [searchTerm, setSearchTerm] = useState("");

  return (
    <Layout>
      <div className="max-w-7xl mx-auto">
        
        <Buscador onSearch={setSearchTerm} /> {/* Pasa la función para actualizar el término de búsqueda */}
        <PropuestaDiv searchTerm={searchTerm} /> {/* Pasa el término de búsqueda */}
        
      </div>
    </Layout>

    
  );
}

export default Home;

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "SGITT",
  description: "Sistema de Gestion Integral para Trabajo Terminal",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

================
File: src/app/login/page.tsx
================
import Login from "@/components/Login";
import Footer from "@/components/Footer";

const App = () =>{
  return (
    <main className="w-[90%] m-auto">
      <Login /> 
      <Footer />
    </main>
  );
}

export default App;

================
File: src/app/page.tsx
================
import Buscador from "@/components/Buscador";
import Footer from "@/components/Footer";
import NabVar from "@/components/NabVar";
import PropuestaDiv from "@/components/PropuestaDiv";
import ValorDiv from "@/components/ValorDiv";
import Landing from "@/components/Landing";

const App = () =>{
  return (
    <main className="w-[90%] m-auto">
      <Landing /> 
      <Footer />
      {/* 
      <NabVar />
      <Buscador />
      <PropuestaDiv />
      <ValorDiv />
      <Footer />
      */}
    </main>
  );
}

export default App;

================
File: src/app/perfil/mispropuestas/page.tsx
================
'use client';

import React, { useState } from 'react';
import Layout from '@/components/Layout';
import MisPropuestas from '@/components/MisPropuestas';


const MisPropuestasPage: React.FC = () => {
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  return (
    
    <Layout>
      <MisPropuestas />
    </Layout>
  );
};

export default MisPropuestasPage;

================
File: src/app/perfil/page.tsx
================
// Perfil.tsx
'use client';
import React, { useState } from 'react';
import Layout from '@/components/Layout';
import MainProfile from '@/components/MainProfile';

const Perfil = () => {
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  return (
    <Layout>
      <div className="max-w-7xl mx-auto">
        
      <MainProfile />
        
      </div>
    </Layout>
  );
};

export default Perfil;

================
File: src/app/propuesta/crear/page.tsx
================
'use client';
import React from 'react';
import Layout from "@/components/Layout";
import CrearPropuesta from "@/components/CrearPropuesta";


const App = () =>{
  return (
    <Layout>
      <CrearPropuesta />
    </Layout>
    
  );
}
export default App;

================
File: src/app/registro/page.tsx
================
import Register from "@/components/Registro";
import Footer from "@/components/Footer";

const App = () =>{
  return (
    <main className="w-[90%] m-auto">
      <Register /> 
      <Footer />
    </main>
  );
}

export default App;

================
File: src/app/utils/adminApi.ts
================
import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api';

const getAuthHeader = () => {
  const token = localStorage.getItem('accessToken');
  return {
    headers: { Authorization: `Bearer ${token}` }
  };
};

export const fetchAdminStats = async () => {
  try {
    const response = await axios.get(`${API_URL}/admin/stats/`, getAuthHeader());
    return response.data;
  } catch (error) {
    console.error('Error fetching admin stats:', error);
    throw error;
  }
};

export const fetchAdminData = async (entity: string, searchTerm: string = '') => {
  try {
    const response = await axios.get(
      `${API_URL}/admin/${entity}/?q=${searchTerm}`,
      getAuthHeader()
    );
    return response.data;
  } catch (error) {
    console.error(`Error fetching ${entity}:`, error);
    throw error;
  }
};

export const deleteAdminEntity = async (entity: string, id: number) => {
  try {
    await axios.delete(
      `${API_URL}/admin/${entity}/${id}/`,
      getAuthHeader()
    );
  } catch (error) {
    console.error(`Error deleting ${entity}:`, error);
    throw error;
  }
};

export const updateAdminEntity = async (entity: string, id: number, data: any) => {
  try {
    const response = await axios.put(
      `${API_URL}/admin/${entity}/${id}/`,
      data,
      getAuthHeader()
    );
    return response.data;
  } catch (error) {
    console.error(`Error updating ${entity}:`, error);
    throw error;
  }
};

export const createAdminEntity = async (entity: string, data: any) => {
  try {
    const response = await axios.post(
      `${API_URL}/admin/${entity}/`,
      data,
      getAuthHeader()
    );
    return response.data;
  } catch (error) {
    console.error(`Error creating ${entity}:`, error);
    throw error;
  }
};

================
File: src/app/utils/api.ts
================
import axios, { AxiosError } from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api';

interface UserData {
  nombre: string;
  apellido_paterno: string;
  apellido_materno: string;
  boleta: string;
  email: string;
  carrera: string;
  plan_estudios: string;
  password: string;
  areas_ids: number[];
  areas_custom: string[];
}

interface Credentials {
  email: string;
  password: string;
}

interface PropuestaData {
  nombre: string;
  objetivo: string;
  cantidad_alumnos: number;
  cantidad_profesores: number;
  requisitos: string[];
  palabras_clave: string[];
  areas: string[];
  tipo_propuesta: string;
  datos_contacto: string[];
}

// En Propuesta
interface Propuesta {
  id: number;
  nombre: string;
  objetivo: string;
  cantidad_alumnos: number;
  cantidad_profesores: number;
  requisitos: { id: number; descripcion: string }[];
  palabras_clave: { id: number; palabra: string }[];
  areas: { id: number; nombre: string }[];
  carrera: string;
  tipo_propuesta: string;
  datos_contacto: { id: number; dato: string }[];
  autor: {
    nombre: string;
    email: string;
    tipo: 'alumno' | 'profesor';
  };
  fecha_creacion: string;
  fecha_actualizacion: string;
}

interface Area {
  id: number;
  nombre: string;
}


interface ApiResponse {
  // Define la estructura de tu respuesta API
  // Esto es solo un ejemplo, ajusta según la respuesta real de tu API
  token?: string;
  message?: string;
  // Agrega otros campos según sea necesario
}

export const register = async (userData: UserData): Promise<ApiResponse> => {
  try {

    const dataToSend = {
      ...userData,
      areas_custom: userData.areas_custom || [],
    };

    console.log('Datos enviados al servidor:', dataToSend);
    const response = await axios.post<ApiResponse>(`${API_URL}/register/`, dataToSend);
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Error de respuesta:', error.response?.data);
      throw error.response?.data || error.message;
    }
    throw error;
  }
};

export const login = async (credentials: Credentials): Promise<ApiResponse> => {
  try {
    const response = await axios.post<ApiResponse>(`${API_URL}/login/`, credentials);
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 403) {
        throw new Error(error.response.data.error || "No tienes permiso para acceder. Verifica tu correo o contacta al administrador.");
      } else if (error.response?.status === 401) {
        throw new Error("Credenciales inválidas. Por favor, verifica tu correo y contraseña.");
      }
      throw error.response?.data?.error || "Ocurrió un error al iniciar sesión.";
    }
    throw new Error("Ocurrió un error inesperado. Por favor, intenta de nuevo.");
  }
};

interface ApiResponse {
  refresh: string;
  access: string;
  user_type: string;
  user_email: string;
}

export const crearPropuesta = async (propuestaData: PropuestaData): Promise<ApiResponse> => {
  try {
    const token = localStorage.getItem('accessToken');
    console.log('Token:', token);
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    const response = await axios.post<ApiResponse>(`${API_URL}/propuestas/`, propuestaData, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Error de Axios:', error.response?.data);
      throw error.response?.data || error.message;
    }
    console.error('Error no Axios:', error);
    throw error;
  }
};

export const verifyEmail = async (token: string): Promise<ApiResponse> => {
  try {
    const response = await axios.get<ApiResponse>(`${API_URL}/verify-email/${token}/`);
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      // Si la respuesta contiene datos, devuélvelos
      if (error.response?.data) {
        return error.response.data;
      }
      throw error.response?.data || error.message;
    }
    throw error;
  }
};


export const obtenerPropuestasUsuario = async (): Promise<Propuesta[]> => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    const response = await axios.get<Propuesta[]>(`${API_URL}/propuestas/mis_propuestas/`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      // Propagamos el error de Axios para que sea manejado en el componente
      throw error;
    }
    throw new Error('Error inesperado al obtener las propuestas');
  }
};

interface Profesor {
  id: number;
  email: string;
  nombre: string;
  apellido_paterno: string;
  apellido_materno: string;
  materias: Array<{
    id: number;
    nombre: string;
  }>;
  areas_profesor: Array<{
    id: number;
    nombre: string;
  }>;
  es_profesor: boolean;
}

export const buscarProfesores = async (query: string): Promise<any[]> => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    const response = await axios.get(`${API_URL}/profesores/buscar/`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
      params: { q: query }
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Error de Axios:', error.response?.data);
      throw error.response?.data || error.message;
    }
    console.error('Error no Axios:', error);
    throw error;
  }
};




export const obtenerPropuestas = async (): Promise<Propuesta[]> => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    const response = await axios.get<Propuesta[]>(`${API_URL}/propuestas/`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      throw error;
    }
    throw new Error('Error inesperado al obtener las propuestas');
  }
};

export const obtenerAreas = async (): Promise<Area[]> => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    const response = await axios.get<Area[]>(`${API_URL}/areas/`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      throw error;
    }
    throw new Error('Error inesperado al obtener las áreas');
  }
};


export const actualizarPropuesta = async (id: number, propuestaData: PropuestaData): Promise<ApiResponse> => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    const response = await axios.put<ApiResponse>(
      `${API_URL}/propuestas/${id}/`, 
      propuestaData,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Error de Axios:', error.response?.data);
      throw error.response?.data || error.message;
    }
    console.error('Error no Axios:', error);
    throw error;
  }
};


export const eliminarPropuesta = async (id: number): Promise<void> => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    await axios.delete(`${API_URL}/propuestas/${id}/`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Error de Axios:', error.response?.data);
      throw error.response?.data || error.message;
    }
    throw error;
  }
};

export const obtenerMaterias = async (): Promise<any[]> => {
  try {
    const response = await axios.get<any[]>(`${API_URL}/materias/`);
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      throw error;
    }
    throw new Error('Error inesperado al obtener las materias');
  }
}



export const obtenerPerfilAlumno = async () => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    const response = await axios.get(`${API_URL}/alumnos/perfil/`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 401) {
        throw new Error('Sesión expirada. Por favor, inicie sesión nuevamente.');
      }
      throw new Error(error.response?.data?.message || 'Error al obtener el perfil');
    }
    throw new Error('Error inesperado al obtener el perfil');
  }
};



export const obtenerPerfilProfesor = async () => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    
    const response = await axios.get(`${API_URL}/profesores/perfil/`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 401) {
        throw new Error('Sesión expirada. Por favor, inicie sesión nuevamente.');
      }
      throw new Error(error.response?.data?.message || 'Error al obtener el perfil');
    }
    throw new Error('Error inesperado al obtener el perfil');
  }
};



interface ActualizarPerfilData {
  areas_ids?: number[];
  materias_ids?: number[];
}

export const actualizarPerfilAlumno = async (data: ActualizarPerfilData) => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    console.log('Data:', data);
    const response = await axios.patch(
      `${API_URL}/alumnos/perfil/`,
      data,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      throw new Error(error.response?.data?.message || 'Error al actualizar el perfil');
    }
    throw new Error('Error inesperado al actualizar el perfil');
  }
};

export const actualizarPerfilProfesor = async (data: ActualizarPerfilData) => {
  try {
    const token = localStorage.getItem('accessToken');
    if (!token) {
      throw new Error('No se encontró el token de acceso');
    }
    console.log('Data:', data);
    const response = await axios.patch(
      `${API_URL}/profesores/perfil/`,
      data,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      throw new Error(error.response?.data?.message || 'Error al actualizar el perfil');
    }
    throw new Error('Error inesperado al actualizar el perfil');
  }
};

================
File: src/app/utils/authService.ts
================
import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api';

interface TokenResponse {
  access: string;
  refresh: string;
}

class AuthService {
  static async refreshToken(): Promise<string | null> {
    try {
      const refreshToken = localStorage.getItem('refreshToken');
      if (!refreshToken) {
        throw new Error('No refresh token available');
      }

      const response = await axios.post<TokenResponse>(`${API_URL}/token/refresh/`, {
        refresh: refreshToken
      });

      const newAccessToken = response.data.access;
      localStorage.setItem('accessToken', newAccessToken);
      return newAccessToken;
    } catch (error) {
      localStorage.removeItem('accessToken');
      localStorage.removeItem('refreshToken');
      return null;
    }
  }

  static async getValidToken(): Promise<string | null> {
    let token = localStorage.getItem('accessToken');
    if (!token) {
      token = await this.refreshToken();
    }
    return token;
  }
}

export default AuthService;

================
File: src/app/verify-email/[token]/page.tsx
================
'use client'

import React, { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import Footer from "@/components/Footer";
import { verifyEmail } from '../../utils/api';  // Asegúrate de que la ruta de importación sea correcta

const VerifyEmail = () => {
  const [verificationStatus, setVerificationStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const params = useParams();
  const token = params.token as string;

  useEffect(() => {
    const performVerification = async () => {
      try {
        const response = await verifyEmail(token);
        if (response.message) {
          // Si hay un mensaje en la respuesta, consideramos que es exitoso
          setVerificationStatus('success');
        } else {
          setVerificationStatus('error');
        }
      } catch (error) {
        console.error('Error verifying email:', error);
        setVerificationStatus('error');
      }
    };
  
    performVerification();
  }, [token]);

  return (
    <main className="w-[90%] m-auto">
      <div className="flex justify-center items-center min-h-screen bg-gradient-to-b from-white to-gray-100">
        <div className="bg-white p-8 rounded-lg shadow-md text-center max-w-md w-full">
          {verificationStatus === 'loading' && (
            <div>
              <h2 className="text-2xl font-bold mb-4">Verificando tu correo electrónico...</h2>
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
            </div>
          )}
          {verificationStatus === 'success' && (
            <div>
              <h2 className="text-2xl font-bold mb-4 text-green-600">¡Correo Verificado!</h2>
              <p className="mb-4">Tu cuenta ha sido activada exitosamente.</p>
              <a href="/login" className="text-blue-500 hover:underline">Iniciar sesión</a>
            </div>
          )}
          {verificationStatus === 'error' && (
            <div>
              <h2 className="text-2xl font-bold mb-4 text-red-600">Error de Verificación</h2>
              <p className="mb-4">No pudimos verificar tu correo electrónico. El enlace puede haber expirado o ser inválido.</p>
              <a href="/registro" className="text-blue-500 hover:underline">Volver al registro</a>
            </div>
          )}
        </div>
      </div>
      <Footer />
    </main>
  );
};

export default VerifyEmail;

================
File: src/components/Buscador.tsx
================
// Buscador.tsx
'use client';
import React, { useState } from 'react';
import { BiSearchAlt } from 'react-icons/bi';
import { MdOutlineCancel } from "react-icons/md";
import { buscarProfesores } from '../app/utils/api';

interface Materia {
  id: number;
  nombre: string;
}

interface Profesor {
  id: number;
  email: string;
  nombre: string;
  apellido_paterno: string;
  apellido_materno: string;
  materias: Materia[];
  areas_profesor: Array<{id: number, nombre: string}>;
}

interface BuscadorProps {
  onSearch: (term: string) => void;
}

const Buscador: React.FC<BuscadorProps> = ({ onSearch }) => {
  const [buscar, setBuscar] = useState("");
  const [resultados, setResultados] = useState<Profesor[]>([]);

  const handleSearch = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    try {
      const profesores = await buscarProfesores(buscar);
      setResultados(profesores);
    } catch (error) {
      console.error('Error al buscar profesores:', error);
    }
  };

  const handleContactar = (profesor: Profesor) => {
    console.log(`Contactando a ${profesor.nombre} ${profesor.apellido_paterno} ${profesor.apellido_materno}`);
  };

  return (
    <div className='buscadorDiv bg-secondary rounded-lg p-4 md:p-6 lg:p-8 space-y-6 md:space-y-8 mt-4'>
      <form onSubmit={handleSearch} className='w-full'>
        <div className='flex flex-col md:flex-row items-center rounded-xl gap-4 p-3 md:p-5 shadow-sm shadow-oscure bg-white'>
          <div className='flex gap-2 items-center w-full'>
            <BiSearchAlt className='text-xl icon' />
            <input 
              type="text" 
              className='bg-transparent text-oscure focus:outline-none w-full' 
              placeholder='Ingresa tu objetivo / idea de protocolo para recomendar profesores' 
              value={buscar}
              onChange={(e) => setBuscar(e.target.value)}
            />
            <MdOutlineCancel 
              className='text-xl icon text-red-500 hover:text-oscure cursor-pointer' 
              onClick={() => setBuscar('')} 
            />
          </div>
          <button className='bg-oscure w-full md:w-auto py-2 px-4 md:px-10 rounded-xl text-white cursor-pointer hover:bg-primary transition-colors'>
            Buscar
          </button>
        </div>
      </form>

      <div className='resultadosDiv grid gap-4 md:grid-cols-2 lg:grid-cols-3'>
        {resultados.map((profesor) => (
          <div key={profesor.id} className='profesorCard bg-white p-4 rounded-lg shadow-md'>
            <h3 className='text-lg font-bold'>
              {`${profesor.nombre} ${profesor.apellido_paterno} ${profesor.apellido_materno}`}
            </h3>
            <p>Correo: {profesor.email}</p>
            
            {/* Materias */}
            <div className="mt-2">
              <p className="font-semibold">Materias:</p>
              <div className="flex flex-wrap gap-1 mt-1">
                {profesor.materias.map((materia) => (
                  <span 
                    key={materia.id}
                    className="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full"
                  >
                    {materia.nombre}
                  </span>
                ))}
              </div>
            </div>

            {/* Áreas de conocimiento */}
            <div className="mt-2">
              <p className="font-semibold">Áreas de conocimiento:</p>
              <div className="flex flex-wrap gap-1 mt-1">
                {profesor.areas_profesor.map((area) => (
                  <span 
                    key={area.id}
                    className="inline-block px-2 py-1 bg-green-100 text-green-800 text-sm rounded-full"
                  >
                    {area.nombre}
                  </span>
                ))}
              </div>
            </div>

            <button 
              className='mt-4 bg-primary text-white px-4 py-2 rounded-md hover:bg-secondary transition-colors duration-300 w-full'
              onClick={() => handleContactar(profesor)}
            >
              Contactar
            </button>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Buscador;

================
File: src/components/ChartAdmin.tsx
================
import React, { useState } from "react";
import ReactApexChart from "react-apexcharts";

interface Series {
  name: string;
  data: number[];
}

interface Options {
  chart: {
    height: number;
    type: string;
  };
  dataLabels: {
    enabled: boolean;
  };
  stroke: {
    curve: string;
  };
  xaxis: {
    type: string;
    categories: string[];
  };
  tooltip: {
    x: {
      format: string;
    };
  };
}

const ChartAdmin: React.FC = () => {
  const [series] = useState<Series[]>([
    {
      name: "series1",
      data: [31, 40, 28, 51, 42, 109, 100],
    },
    {
      name: "series2",
      data: [11, 32, 45, 32, 34, 52, 41],
    },
  ]);

  const [options] = useState<Options>({
    chart: {
      height: 350,
      type: "area",
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      curve: "smooth",
    },
    xaxis: {
      type: "datetime",
      categories: [
        "2018-09-19T00:00:00.000Z",
        "2018-09-19T01:30:00.000Z",
        "2018-09-19T02:30:00.000Z",
        "2018-09-19T03:30:00.000Z",
        "2018-09-19T04:30:00.000Z",
        "2018-09-19T05:30:00.000Z",
        "2018-09-19T06:30:00.000Z",
      ],
    },
    tooltip: {
      x: {
        format: "dd/MM/yy HH:mm",
      },
    },
  });

  return (
    <div className="flex-1">
      <h3 className="table-title">CRUD en cuestion</h3>
      <div className="flex-1 bg-help3 p-2 rounded-lg">
        <div>
          <ReactApexChart options={options} series={series} type="area" height={350} />
        </div>
      </div>
    </div>
  );
}

export default ChartAdmin;

================
File: src/components/Chat/ChatRoom.tsx
================
import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import axios from 'axios';

interface Message {
  id: number;
  content: string;
  sender_email: string;
  sender_name: string;
  timestamp: string;
  read_by: Array<{ id: number; email: string }>;
}

interface ChatRoomProps {
  conversation: {
    id: number;
    name: string;
    participants: any[];
    is_group: boolean;
  } | null;
}

const ChatRoom: React.FC<ChatRoomProps> = ({ conversation }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [ws, setWs] = useState<WebSocket | null>(null);
  const messagesEndRef = useRef<null | HTMLDivElement>(null);
  const router = useRouter();
  const currentUserEmail = localStorage.getItem('userEmail');

  const markMessageAsRead = async (messageId: number) => {
    try {
      const token = localStorage.getItem('accessToken');
      await axios.post(
        `http://localhost:8000/api/chat/messages/${messageId}/mark_as_read/`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
    } catch (error) {
      console.error('Error marking message as read:', error);
    }
  };

  const markAllMessagesAsRead = async (messages: Message[]) => {
    const unreadMessages = messages.filter(message => 
      message.sender_email !== currentUserEmail &&
      !message.read_by.some(user => user.email === currentUserEmail)
    );

    for (const message of unreadMessages) {
      await markMessageAsRead(message.id);
    }
  };

  useEffect(() => {
    const fetchMessages = async () => {
      if (!conversation) return;
      
      try {
        const token = localStorage.getItem('accessToken');
        const response = await axios.get(
          `http://localhost:8000/api/chat/messages/?conversation_id=${conversation.id}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setMessages(response.data);
        await markAllMessagesAsRead(response.data);
      } catch (error) {
        console.error('Error fetching messages:', error);
      }
    };

    fetchMessages();
    
    // Configurar un intervalo para verificar y marcar mensajes como leídos
    const checkInterval = setInterval(() => {
      if (document.visibilityState === 'visible' && messages.length > 0) {
        markAllMessagesAsRead(messages);
      }
    }, 5000);

    return () => clearInterval(checkInterval);
  }, [conversation]);

  useEffect(() => {
    if (!conversation) return;

    const token = localStorage.getItem('accessToken');
    if (!token) {
      router.push('/login');
      return;
    }

    const websocket = new WebSocket(`ws://localhost:8000/ws/chat/${conversation.id}/`);
    
    websocket.onopen = () => {
      console.log('Connected to WebSocket');
    };

    websocket.onmessage = async (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'message') {
        const newMessage = data.message;
        setMessages(prev => [...prev, newMessage]);
        
        // Si el mensaje es de otro usuario y la ventana está visible, márcalo como leído
        if (newMessage.sender_email !== currentUserEmail && 
            document.visibilityState === 'visible') {
          await markMessageAsRead(newMessage.id);
        }
      }
    };

    websocket.onclose = () => {
      console.log('Disconnected from WebSocket');
    };

    setWs(websocket);

    return () => {
      websocket.close();
    };
  }, [conversation, router, currentUserEmail]);

  // Agregar listener para el evento de visibilidad del documento
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible' && messages.length > 0) {
        markAllMessagesAsRead(messages);
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !ws || !conversation) return;

    try {
      const token = localStorage.getItem('accessToken');
      const userId = localStorage.getItem('userId');

      // Enviar mensaje a través de WebSocket
      ws.send(JSON.stringify({
        message: newMessage,
        user_id: userId
      }));

      // Guardar en la base de datos y obtener la respuesta
      const response = await axios.post(
        'http://localhost:8000/api/chat/messages/',
        {
          content: newMessage,
          conversation_id: conversation.id
        },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );

      // Actualizar el estado local con el nuevo mensaje
      setMessages(prev => [...prev, response.data]);
      setNewMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  if (!conversation) {
    return (
      <div className="flex-1 flex items-center justify-center bg-gray-50">
        <p className="text-gray-500">Selecciona una conversación para comenzar</p>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col bg-white">
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-lg font-semibold">
          {conversation.is_group 
            ? conversation.name 
            : conversation.participants
                .filter(p => p.email !== localStorage.getItem('userEmail'))
                .map(p => `${p.first_name} ${p.last_name}`)
                .join(', ')}
        </h2>
        <p className="text-sm text-gray-500">
          {conversation.participants.length} participantes
        </p>
      </div>

      {/* Messages */}
      <div className="flex-1 p-4 overflow-y-auto">
        {messages.map((message, index) => {
          const isCurrentUser = message.sender_email === localStorage.getItem('userEmail');
          return (
            <div key={message.id} className={`mb-4 flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-[70%] ${isCurrentUser ? 'bg-blue-500 text-white' : 'bg-gray-100'} rounded-lg p-3`}>
                {!isCurrentUser && (
                  <p className="text-sm text-gray-500 mb-1">{message.sender_name}</p>
                )}
                <p>{message.content}</p>
                <p className="text-xs mt-1 opacity-70">
                  {new Date(message.timestamp).toLocaleTimeString()}
                </p>
              </div>
            </div>
          );
        })}
        <div ref={messagesEndRef} />
      </div>

      {/* Message Input */}
      <form onSubmit={sendMessage} className="p-4 border-t border-gray-200">
        <div className="flex gap-2">
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            className="flex-1 border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Escribe un mensaje..."
          />
          <button
            type="submit"
            className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
          >
            Enviar
          </button>
        </div>
      </form>
    </div>
  );
};

export default ChatRoom;

================
File: src/components/Chat/ConversationList.tsx
================
import React, { useState, useEffect } from 'react';
import { UserCircle2, Users } from 'lucide-react';
import axios from 'axios';
import AuthService from '@/app/utils/authService';

interface Conversation {
  id: number;
  name: string;
  participants: any[];
  last_message: any;
  unread_count: number;
  is_group: boolean;
}

interface ConversationListProps {
  onSelectConversation: (conversation: Conversation) => void;
  selectedConversation: Conversation | null;
}

const ConversationList: React.FC<ConversationListProps> = ({ 
  onSelectConversation, 
  selectedConversation 
}) => {
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [wsNotifications, setWsNotifications] = useState<WebSocket | null>(null);

  const fetchConversations = async () => {
    try {
      const token = await AuthService.getValidToken();
      if (!token) return;

      const response = await axios.get(
        `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/chat/conversations/`,
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      setConversations(response.data);
    } catch (error) {
      console.error('Error fetching conversations:', error);
      setError('Error al cargar las conversaciones');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchConversations();

    // Configurar WebSocket para notificaciones
    const wsUrl = `ws://localhost:8000/ws/notifications/`;
    const ws = new WebSocket(wsUrl);

    ws.onopen = () => {
      console.log('Connected to notifications WebSocket');
    };

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'unread_count_update') {
        setConversations(prevConversations =>
          prevConversations.map(conv =>
            conv.id === data.conversation_id
              ? { ...conv, unread_count: data.unread_count }
              : conv
          )
        );
      }
    };

    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    setWsNotifications(ws);

    // Actualizar conversaciones periódicamente cuando la ventana está activa
    const intervalId = setInterval(() => {
      if (document.visibilityState === 'visible') {
        fetchConversations();
      }
    }, 30000); // cada 30 segundos

    // Listener para cambios de visibilidad
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        fetchConversations();
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);

    return () => {
      if (wsNotifications) {
        wsNotifications.close();
      }
      clearInterval(intervalId);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, []);

  // Actualizar contadores cuando se selecciona una conversación
  useEffect(() => {
    if (selectedConversation) {
      setConversations(prevConversations =>
        prevConversations.map(conv =>
          conv.id === selectedConversation.id
            ? { ...conv, unread_count: 0 }
            : conv
        )
      );
    }
  }, [selectedConversation]);

  if (isLoading) {
    return (
      <div className="w-full h-full flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full h-full flex items-center justify-center text-red-500 p-4 text-center">
        {error}
      </div>
    );
  }

  return (
    <div className="w-full h-full flex flex-col bg-white">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b">
        <h2 className="text-xl font-semibold">Mensajes</h2>
        <button className="p-2 hover:bg-gray-100 rounded-full">
          <Users className="w-5 h-5" />
        </button>
      </div>

      {/* Lista de conversaciones */}
      <div className="flex-1 overflow-y-auto">
        {conversations.length === 0 ? (
          <div className="text-center text-gray-500 py-8">
            No hay conversaciones aún
          </div>
        ) : (
          conversations.map((conversation) => (
            <div
              key={conversation.id}
              onClick={() => onSelectConversation(conversation)}
              className={`flex items-center p-4 hover:bg-gray-50 cursor-pointer ${
                selectedConversation?.id === conversation.id ? 'bg-blue-50' : ''
              }`}
            >
              {/* Avatar */}
              <div className="w-12 h-12 relative rounded-full overflow-hidden bg-gray-200 flex-shrink-0">
                {conversation.is_group ? (
                  <div className="w-full h-full flex items-center justify-center bg-blue-100">
                    <Users className="w-6 h-6 text-blue-600" />
                  </div>
                ) : (
                  <div className="w-full h-full flex items-center justify-center bg-purple-100">
                    <UserCircle2 className="w-8 h-8 text-purple-600" />
                  </div>
                )}
              </div>

              {/* Información de la conversación */}
              <div className="ml-3 flex-1 min-w-0">
                <div className="flex items-center justify-between">
                  <h3 className="text-sm font-semibold truncate">
                    {conversation.is_group 
                      ? conversation.name 
                      : conversation.participants
                          .filter(p => p.email !== localStorage.getItem('userEmail'))
                          .map(p => `${p.first_name} ${p.last_name}`)
                          .join(', ')}
                  </h3>
                  {conversation.last_message && (
                    <span className="text-xs text-gray-500">
                      {new Date(conversation.last_message.timestamp).toLocaleTimeString([], {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  )}
                </div>
                {conversation.last_message && (
                  <p className="text-sm text-gray-500 truncate">
                    <span className="text-xs text-gray-400 mr-1">
                      {conversation.last_message.sender_email === localStorage.getItem('userEmail') 
                        ? 'Tú:' 
                        : ''}
                    </span>
                    {conversation.last_message.content}
                  </p>
                )}
              </div>

              {/* Indicador de mensajes no leídos */}
              {conversation.unread_count > 0 && (
                <div className="ml-2 bg-blue-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {conversation.unread_count}
                </div>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default ConversationList;

================
File: src/components/Chat/CreateChatDialog.tsx
================
// src/components/Chat/CreateChatDialog.tsx
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { X, Search, UserPlus, Users, User as UserIcon } from 'lucide-react';
import { useRouter } from 'next/navigation';
import AuthService from '@/app/utils/authService';
import { debounce } from 'lodash';


interface UserType {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
  full_name: string;
}

interface CreateChatDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConversationCreated: () => void;
}

const CreateChatDialog: React.FC<CreateChatDialogProps> = ({
  isOpen,
  onClose,
  onConversationCreated
}) => {
  const router = useRouter();
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState<UserType[]>([]);
  const [selectedUsers, setSelectedUsers] = useState<UserType[]>([]);
  const [isGroup, setIsGroup] = useState(false);
  const [groupName, setGroupName] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!isOpen) {
      // Limpiar estados cuando se cierra el diálogo
      setSearchTerm('');
      setSearchResults([]);
      setSelectedUsers([]);
      setIsGroup(false);
      setGroupName('');
      setError(null);
    }
  }, [isOpen]);

  const searchUsers = async (query: string) => {
    if (query.length < 2) {
      setSearchResults([]);
      setIsSearching(false);
      return;
    }

    setIsSearching(true);
    setError(null);

    try {
      // Obtener un token válido
      const token = await AuthService.getValidToken();
      if (!token) {
        router.push('/login');
        return;
      }

      console.log('Searching with query:', query);
      
      const response = await axios.get(
        `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/usuarios/search/?q=${encodeURIComponent(query)}`,
        {
          headers: { 
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      console.log('Search response:', response.data);
      setSearchResults(response.data);
    } catch (error: any) {
      console.error('Error searching users:', error);
      
      if (error.response?.status === 401) {
        // Si aún recibimos 401 después de intentar refrescar el token,
        // redirigir al login
        router.push('/login');
        return;
      }
      
      setError(error.response?.data?.detail || 'Error al buscar usuarios');
      setSearchResults([]);
    } finally {
      setIsSearching(false);
    }
  };

  // Función debounce para la búsqueda
  const debouncedSearch = useCallback(
    debounce((query: string) => searchUsers(query), 300),
    []
  );

  // useEffect para limpiar el debounce al desmontar
  useEffect(() => {
    return () => {
      debouncedSearch.cancel();
    };
  }, [debouncedSearch]);

  const handleCreateConversation = async () => {
    try {
      const token = localStorage.getItem('accessToken');
      await axios.post(
        'http://localhost:8000/api/chat/conversations/create_or_get_conversation/',
        {
          participant_ids: selectedUsers.map(user => user.id),
          name: isGroup ? groupName : '',
          is_group: isGroup
        },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      onConversationCreated();
      onClose();
    } catch (error) {
      console.error('Error creating conversation:', error);
      setError('Error al crear la conversación');
    }
  };

  const handleSearch = async (query: string) => {
    if (query.length < 2) {
      setSearchResults([]);
      setIsSearching(false);
      return;
    }

    setIsSearching(true);
    setError(null);

    try {
      const token = localStorage.getItem('accessToken');
      const response = await axios.get(
        `http://localhost:8000/api/usuarios/search/?q=${encodeURIComponent(query)}`,
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      setSearchResults(response.data);
    } catch (error) {
      console.error('Error searching users:', error);
      setError('Error al buscar usuarios');
    } finally {
      setIsSearching(false);
    }
  };

  if (!isOpen) return null;

  const isCreateButtonDisabled = 
    selectedUsers.length === 0 || 
    (isGroup && !groupName.trim()) ||
    (!isGroup && selectedUsers.length !== 1);

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg w-full max-w-md p-6 max-h-[90vh] overflow-y-auto">
            {/* Header */}
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Nueva Conversación</h2>
              <button 
                onClick={onClose} 
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
      
            {/* Grupo checkbox */}
            <div className="mb-4">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={isGroup}
                  onChange={(e) => setIsGroup(e.target.checked)}
                  className="form-checkbox h-4 w-4 text-blue-500 rounded border-gray-300 focus:ring-blue-500"
                />
                <span className="flex items-center text-gray-700">
                  <Users className="w-5 h-5 mr-2" />
                  Crear grupo
                </span>
              </label>
            </div>
      
            {/* Nombre del grupo (si es grupo) */}
            {isGroup && (
              <div className="mb-4">
                <input
                  type="text"
                  value={groupName}
                  onChange={(e) => setGroupName(e.target.value)}
                  placeholder="Nombre del grupo"
                  className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            )}
      
            {/* Buscador */}
            <div className="relative mb-4">
              <div className="flex items-center border rounded-lg p-2 focus-within:ring-2 focus-within:ring-blue-500">
                <Search className="w-5 h-5 text-gray-400 mr-2" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => {
                    setSearchTerm(e.target.value);
                    searchUsers(e.target.value);
                  }}
                  placeholder="Buscar usuarios por nombre, correo o boleta..."
                  className="w-full outline-none"
                />
              </div>
      
              {/* Texto de ayuda */}
              <div className="text-xs text-gray-500 mt-1 px-2">
                <p>Puedes buscar por:</p>
                <ul className="list-disc list-inside space-y-1">
                  <li>Nombre o apellidos</li>
                  <li>Correo electrónico</li>
                  <li>Número de boleta</li>
                </ul>
              </div>
      
              {/* Usuarios seleccionados */}
              {selectedUsers.length > 0 && (
                <div className="mt-4 flex flex-wrap gap-2">
                  {selectedUsers.map((user) => (
                    <div
                      key={user.id}
                      className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full flex items-center gap-2 animate-fadeIn"
                    >
                      <span>{user.full_name || user.email}</span>
                      <button
                        onClick={() => setSelectedUsers(users => users.filter(u => u.id !== user.id))}
                        className="hover:text-blue-600 transition-colors"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
      
              {/* Resultados de búsqueda */}
              {searchResults.length > 0 && (
                <div className="absolute w-full mt-1 bg-white border rounded-lg shadow-lg max-h-60 overflow-y-auto z-10">
                  {searchResults.map((user) => (
                    <div
                      key={user.id}
                      className="p-3 hover:bg-gray-50 cursor-pointer flex items-center gap-3 transition-colors"
                      onClick={() => {
                        if (!selectedUsers.some(u => u.id === user.id)) {
                          setSelectedUsers([...selectedUsers, user]);
                          setSearchTerm('');
                          setSearchResults([]);
                        }
                      }}
                    >
                      <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
                        <UserIcon className="w-5 h-5 text-blue-600" />
                      </div>
                      <div className="flex-1">
                        <p className="font-medium">
                          {user.full_name || `${user.first_name} ${user.last_name}`}
                        </p>
                        <p className="text-sm text-gray-500">{user.email}</p>
                      </div>
                      {!selectedUsers.some(u => u.id === user.id) && (
                        <UserPlus className="w-5 h-5 text-gray-400" />
                      )}
                    </div>
                  ))}
                </div>
              )}
      
              {/* Estado de carga */}
              {isSearching && (
                <div className="mt-2 text-gray-600 flex items-center justify-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent mr-2"></div>
                  Buscando...
                </div>
              )}
      
              {/* Mensaje de error */}
              {error && (
                <div className="mt-2 text-red-500 text-sm bg-red-50 p-2 rounded-lg">
                  {error}
                </div>
              )}
            </div>
      
            {/* Botones de acción */}
            <div className="flex justify-end gap-2 mt-6 pt-4 border-t">
              <button
                onClick={onClose}
                className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={handleCreateConversation}
                disabled={selectedUsers.length === 0 || (isGroup && !groupName.trim())}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  selectedUsers.length === 0 || (isGroup && !groupName.trim())
                    ? 'bg-gray-300 cursor-not-allowed'
                    : 'bg-blue-500 hover:bg-blue-600 text-white'
                }`}
              >
                Crear
              </button>
            </div>
          </div>
        </div>
      );
};

export default CreateChatDialog;

================
File: src/components/Chat/SearchInput.tsx
================
// src/components/Chat/SearchInput.tsx
import React, { useState, useEffect } from 'react';
import { Search, Mail, User, Hash } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

interface SearchInputProps {
  onSearch: (query: string) => void;
  isSearching: boolean;
  placeholder?: string;
}

const SearchInput: React.FC<SearchInputProps> = ({
  onSearch,
  isSearching,
  placeholder = "Buscar usuarios..."
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchType, setSearchType] = useState<'all' | 'email' | 'name' | 'id'>('all');

  const handleSearch = (value: string) => {
    setSearchTerm(value);
    onSearch(value);
  };

  return (
    <div className="space-y-2">
      <div className="flex items-center border rounded-lg p-2 focus-within:ring-2 focus-within:ring-blue-500 bg-white">
        <Search className="w-5 h-5 text-gray-400 mr-2" />
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => handleSearch(e.target.value)}
          placeholder={placeholder}
          className="w-full outline-none text-gray-700"
        />
        <AnimatePresence>
          {isSearching && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="animate-spin w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full"
            />
          )}
        </AnimatePresence>
      </div>

      <div className="flex gap-2 text-sm text-gray-600">
        <button
          onClick={() => setSearchType('all')}
          className={`px-3 py-1 rounded-full ${
            searchType === 'all' ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'
          }`}
        >
          Todos
        </button>
        <button
          onClick={() => setSearchType('email')}
          className={`px-3 py-1 rounded-full flex items-center gap-1 ${
            searchType === 'email' ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'
          }`}
        >
          <Mail className="w-4 h-4" />
          Email
        </button>
        <button
          onClick={() => setSearchType('name')}
          className={`px-3 py-1 rounded-full flex items-center gap-1 ${
            searchType === 'name' ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'
          }`}
        >
          <User className="w-4 h-4" />
          Nombre
        </button>
        <button
          onClick={() => setSearchType('id')}
          className={`px-3 py-1 rounded-full flex items-center gap-1 ${
            searchType === 'id' ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'
          }`}
        >
          <Hash className="w-4 h-4" />
          Boleta/Matrícula
        </button>
      </div>

      <div className="text-xs text-gray-500 mt-1">
        <p>Ejemplos de búsqueda:</p>
        <ul className="list-disc list-inside space-y-1 mt-1">
          <li>Por nombre: "Juan Pérez", "Juan", "Pérez"</li>
          <li>Por correo: "juan@example.com", "@ipn.mx"</li>
          <li>Por boleta/matrícula: "2020630000", "PE12345"</li>
        </ul>
      </div>
    </div>
  );
};

================
File: src/components/ConfirmDeleteModal.tsx
================
import React from 'react';
import { X } from 'lucide-react';

interface ConfirmDeleteModalProps {
  onConfirm: () => void;
  onCancel: () => void;
  isOpen: boolean;
  nombre: string;
}

const ConfirmDeleteModal: React.FC<ConfirmDeleteModalProps> = ({
  onConfirm,
  onCancel,
  isOpen,
  nombre
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold text-gray-800">Confirmar Eliminación</h2>
          <button
            onClick={onCancel}
            className="text-gray-500 hover:text-gray-700 transition-colors"
          >
            <X size={24} />
          </button>
        </div>
        
        <div className="mb-6">
          <p className="text-gray-600">
            ¿Estás seguro que deseas eliminar la propuesta "{nombre}"?
          </p>
          <p className="text-red-500 text-sm mt-2">
            Esta acción no se puede deshacer.
          </p>
        </div>

        <div className="flex justify-end gap-4">
          <button
            onClick={onCancel}
            className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={onConfirm}
            className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
          >
            Eliminar
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfirmDeleteModal;

================
File: src/components/CrearPropuesta.tsx
================
'use client'

import React, { useState, ChangeEvent, FormEvent } from 'react';
import { PlusCircle, X } from 'lucide-react';
import { crearPropuesta } from '../app/utils/api';
import { useRouter } from 'next/navigation';

interface PropuestaForm {
  nombre: string;
  objetivo: string;
  cantidad_alumnos: number;
  cantidad_profesores: number;
  requisitos: string[];
  palabras_clave: string[];
  areas: string[];
  tipo_propuesta: string;
  datos_contacto: string[];
}
  
  const CrearPropuesta: React.FC = () => {
    const router = useRouter();
    const [success, setSuccess] = useState(false);
    const [nuevoDatoContacto, setNuevoDatoContacto] = useState('');

    const [propuesta, setPropuesta] = useState<PropuestaForm>({
      nombre: '',
      objetivo: '',
      cantidad_alumnos: 1,
      cantidad_profesores: 1,
      requisitos: [],
      palabras_clave: [],
      areas: [],
      tipo_propuesta: '',
      datos_contacto: [localStorage.getItem('userEmail') || ''], // Email del usuario por defecto
    });

    const [nuevoRequisito, setNuevoRequisito] = useState('');
    const [nuevaPalabraClave, setNuevaPalabraClave] = useState('');
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [nuevaArea, setNuevaArea] = useState('');
  
    const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      const { name, value } = e.target;
      setPropuesta(prev => ({ ...prev, [name]: value }));
    };

    const handleAddDatoContacto = () => {
      if (nuevoDatoContacto.trim() !== '') {
        setPropuesta(prev => ({
          ...prev,
          datos_contacto: [...prev.datos_contacto, nuevoDatoContacto.trim()]
        }));
        setNuevoDatoContacto('');
      }
    };

    const handleRemoveDatoContacto = (index: number) => {
      // No permitir eliminar el email por defecto (índice 0)
      if (index === 0) return;
      
      setPropuesta(prev => ({
        ...prev,
        datos_contacto: prev.datos_contacto.filter((_, i) => i !== index)
      }));
    };
  
    const handleAddRequisito = () => {
      if (nuevoRequisito.trim() !== '') {
        setPropuesta(prev => ({
          ...prev,
          requisitos: [...prev.requisitos, nuevoRequisito.trim()]
        }));
        setNuevoRequisito('');
      }
    };
  
    const handleAddPalabraClave = () => {
      if (nuevaPalabraClave.trim() !== '') {
        setPropuesta(prev => ({
          ...prev,
          palabras_clave: [...prev.palabras_clave, nuevaPalabraClave.trim()]
        }));
        setNuevaPalabraClave('');
      }
    };
  
    const handleRemoveRequisito = (index: number) => {
      setPropuesta(prev => ({
        ...prev,
        requisitos: prev.requisitos.filter((_, i) => i !== index)
      }));
    };
  
    const handleRemovePalabraClave = (index: number) => {
      setPropuesta(prev => ({
        ...prev,
        palabras_clave: prev.palabras_clave.filter((_, i) => i !== index)
      }));
    };

    const handleAddArea = () => {
      if (nuevaArea.trim() !== '') {
        setPropuesta(prev => ({
          ...prev,
          areas: [...prev.areas, nuevaArea.trim()]
        }));
        setNuevaArea('');
      }
    };
  
    const handleRemoveArea = (index: number) => {
      setPropuesta(prev => ({
        ...prev,
        areas: prev.areas.filter((_, i) => i !== index)
      }));
    };
  
    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      const response = await crearPropuesta(propuesta);
      console.log('Propuesta creada:', response);
      setSuccess(true);
      setTimeout(() => {
        router.push('/perfil/mispropuestas');
      }, 2000);
    } catch (error) {
      console.error('Error al crear la propuesta:', error);
      setError('Hubo un error al crear la propuesta. Por favor, intente de nuevo.');
    } finally {
      setIsLoading(false);
    }
  };

    return (
      <div className="w-full max-w-4xl mx-auto bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-shadow duration-300 p-8">
      <div className="w-full max-w-4xl bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-shadow duration-300 p-8">
        <h2 className="text-3xl font-bold text-center text-gray-800 mb-8">Crear Nueva Propuesta</h2>
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span className="block sm:inline">{error}</span>
          </div>
        )}
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span className="block sm:inline">Propuesta creada exitosamente. Redirigiendo...</span>
          </div>
        )}
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="nombre" className="block text-sm font-medium text-gray-700 mb-1">Nombre de la Propuesta</label>
            <input
              id="nombre"
              name="nombre"
              type="text"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={propuesta.nombre}
              onChange={handleChange}
            />
          </div>
          <div>
            <label htmlFor="objetivo" className="block text-sm font-medium text-gray-700 mb-1">Objetivo</label>
            <textarea
              id="objetivo"
              name="objetivo"
              rows={4}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={propuesta.objetivo}
              onChange={handleChange}
            ></textarea>
          </div>
          <div className="flex space-x-4">
            <div className="flex-1">
              <label htmlFor="cantidad_alumnos" className="block text-sm font-medium text-gray-700 mb-1">Cantidad de Alumnos</label>
              <input
                id="cantidad_alumnos"
                name="cantidad_alumnos"
                type="number"
                min="1"
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={propuesta.cantidad_alumnos}
                onChange={handleChange}
              />
            </div>
            <div className="flex-1">
              <label htmlFor="cantidad_profesores" className="block text-sm font-medium text-gray-700 mb-1">Cantidad de Profesores</label>
              <input
                id="cantidad_profesores"
                name="cantidad_profesores"
                type="number"
                min="1"
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={propuesta.cantidad_profesores}
                onChange={handleChange}
              />
            </div>
          </div>
          
          <div>
            <label htmlFor="tipo_propuesta" className="block text-sm font-medium text-gray-700 mb-1">
              Tipo de Propuesta
            </label>
            <input
              id="tipo_propuesta"
              name="tipo_propuesta"
              type="text"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={propuesta.tipo_propuesta}
              onChange={handleChange}
              placeholder="Ej: TT1, Recursamiento, etc."
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Requisitos</label>
            <div className="flex space-x-2 mb-2">
              <input
                type="text"
                value={nuevoRequisito}
                onChange={(e) => setNuevoRequisito(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Nuevo requisito"
              />
              <button
                type="button"
                onClick={handleAddRequisito}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              >
                <PlusCircle size={20} />
              </button>
            </div>
            <div className="space-y-2">
              {propuesta.requisitos.map((req, index) => (
                <div key={index} className="flex items-center space-x-2 bg-gray-100 p-2 rounded-md">
                  <span className="flex-1">{req}</span>
                  <button
                    type="button"
                    onClick={() => handleRemoveRequisito(index)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <X size={20} />
                  </button>
                </div>
              ))}
            </div>
          </div>
          <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Áreas de Conocimiento</label>
          <div className="flex space-x-2 mb-2">
            <input
              type="text"
              value={nuevaArea}
              onChange={(e) => setNuevaArea(e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="Nueva área de conocimiento"
            />
            <button
              type="button"
              onClick={handleAddArea}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              <PlusCircle size={20} />
            </button>
          </div>
          <div className="flex flex-wrap gap-2">
            {propuesta.areas.map((area, index) => (
              <div key={index} className="flex items-center space-x-1 bg-gray-100 px-3 py-1 rounded-full">
                <span>{area}</span>
                <button
                  type="button"
                  onClick={() => handleRemoveArea(index)}
                  className="text-red-500 hover:text-red-700"
                >
                  <X size={16} />
                </button>
              </div>
            ))}
          </div>
        </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Palabras Clave</label>
            <div className="flex space-x-2 mb-2">
              <input
                type="text"
                value={nuevaPalabraClave}
                onChange={(e) => setNuevaPalabraClave(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Nueva palabra clave"
              />
              <button
                type="button"
                onClick={handleAddPalabraClave}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              >
                <PlusCircle size={20} />
              </button>
            </div>
            <div className="flex flex-wrap gap-2">
              {propuesta.palabras_clave.map((palabra, index) => (
                <div key={index} className="flex items-center space-x-1 bg-gray-100 px-3 py-1 rounded-full">
                  <span>{palabra}</span>
                  <button
                    type="button"
                    onClick={() => handleRemovePalabraClave(index)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <X size={16} />
                  </button>
                </div>
              ))}
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Datos de Contacto</label>
            <div className="flex space-x-2 mb-2">
              <input
                type="text"
                value={nuevoDatoContacto}
                onChange={(e) => setNuevoDatoContacto(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Nuevo dato de contacto"
              />
              <button
                type="button"
                onClick={handleAddDatoContacto}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              >
                <PlusCircle size={20} />
              </button>
            </div>
            <div className="space-y-2">
              {propuesta.datos_contacto.map((dato, index) => (
                <div key={index} className="flex items-center space-x-2 bg-gray-100 p-2 rounded-md">
                  <span className="flex-1">{dato}</span>
                  {index !== 0 && ( // Solo mostrar el botón de eliminar si no es el email por defecto
                    <button
                      type="button"
                      onClick={() => handleRemoveDatoContacto(index)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <X size={20} />
                    </button>
                  )}
                </div>
              ))}
            </div>
          </div>

          <button
            type="submit"
            className="w-full py-3 px-4 border border-transparent rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out"
            disabled={isLoading}
          >
            {isLoading ? 'Creando...' : 'Crear Propuesta'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default CrearPropuesta;

================
File: src/components/EditarPerfilModal.tsx
================
import React, { useState, useEffect } from 'react';
import { X, PlusCircle } from 'lucide-react';
import { obtenerMaterias, actualizarPerfilAlumno, actualizarPerfilProfesor } from '../app/utils/api';

interface EditarPerfilModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUpdate: () => void;
  userType: 'alumno' | 'profesor';
  currentData: {
    areas_alumno?: Array<{id: number, nombre: string}>;
    areas_profesor?: Array<{id: number, nombre: string}>;
    materias?: Array<{id: number, nombre: string}>;
  };
}

const EditarPerfilModal: React.FC<EditarPerfilModalProps> = ({
  isOpen,
  onClose,
  onUpdate,
  userType,
  currentData
}) => {
  const [materias, setMaterias] = useState<Array<{id: number, nombre: string}>>([]);
  const [areas, setAreas] = useState<Array<{id: number, nombre: string}>>([]);
  const [selectedMaterias, setSelectedMaterias] = useState<number[]>([]);
  const [selectedAreas, setSelectedAreas] = useState<string[]>([]);
  const [showCustomAreaPopup, setShowCustomAreaPopup] = useState(false);
  const [customArea, setCustomArea] = useState('');
  const [nuevaArea, setNuevaArea] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const fetchMaterias = async () => {
      try {
        const materiasData = await obtenerMaterias();
        setMaterias(materiasData);
      } catch (error) {
        console.error('Error al cargar materias:', error);
      }
    };

    if (isOpen) {
      fetchMaterias();
      // Inicializar selecciones actuales
      if (userType === 'profesor') {
        setSelectedMaterias(currentData.materias?.map(m => m.id) || []);
        setSelectedAreas(currentData.areas_profesor?.map(a => a.nombre) || []);
      } else {
        //setSelectedMaterias(currentData.areas_alumno?.map(a => a.id) || []);
        setSelectedAreas(currentData.areas_alumno?.map(a => a.nombre) || []);
      }
    }
  }, [isOpen, currentData, userType]);

  const handleAddCustomArea = () => {
    if (customArea.trim() && !selectedAreas.includes(customArea.trim())) {
      setSelectedAreas([...selectedAreas, customArea.trim()]);
      setCustomArea('');
      setShowCustomAreaPopup(false);
    }
  };

  const handleAddArea = () => {
    if (nuevaArea.trim() && !selectedAreas.includes(nuevaArea.trim())) {
      setSelectedAreas([...selectedAreas, nuevaArea.trim()]);
      setNuevaArea('');
    }
  };

  const handleAreaChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (value === 'other') {
      setShowCustomAreaPopup(true);
      return;
    }
    
    const materiaId = parseInt(value);
    if (!selectedMaterias.includes(materiaId)) {
      setSelectedMaterias([...selectedMaterias, materiaId]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      if (userType === 'alumno' && selectedAreas.length < 3) {
        setError('Debes seleccionar al menos 3 áreas de conocimiento');
        setIsLoading(false);
        return;
      }

      if (userType === 'profesor' && selectedMaterias.length < 3) {
        setError('Debes seleccionar al menos 3 materias');
        setIsLoading(false);
        return;
      }

      const data = {
        areas_ids: selectedMaterias,
        areas_custom: userType === 'alumno' ? selectedAreas : undefined,
        ...(userType === 'profesor' && { areas_custom: selectedAreas }),
        materias_ids: userType === 'profesor' ? selectedMaterias : undefined
      };

      if (userType === 'alumno') {
        await actualizarPerfilAlumno(data);
      } else {
        await actualizarPerfilProfesor(data);
      }

      onUpdate();
      onClose();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error al actualizar el perfil');
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold">Editar Perfil</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X size={24} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {userType === 'alumno' ? (
            // Sección de áreas para alumnos
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Áreas de conocimiento (mínimo 3)
              </label>
              

              <div>
                <h3 className="font-semibold text-gray-700 mb-2">Áreas de Conocimiento</h3>
                <div className="flex space-x-2 mb-2">
                  <input
                    type="text"
                    value={nuevaArea}
                    onChange={(e) => setNuevaArea(e.target.value)}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                    placeholder="Nueva área de conocimiento"
                  />
                  <button
                    type="button"
                    onClick={handleAddArea}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    <PlusCircle size={20} />
                  </button>
                </div>

              
               {/* Lista de áreas personalizadas */}
               <div className="space-y-2">
                  {selectedAreas.map((area, index) => (
                    <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                      <span>{area}</span>
                      <button
                        type="button"
                        onClick={() => setSelectedAreas(selectedAreas.filter((_, i) => i !== index))}
                        className="text-red-500 hover:text-red-700"
                      >
                        <X size={20} />
                      </button>
                    </div>
                  ))}
                </div>
                </div>
            </div>
          ) : (
            // Sección para profesores
            <>
              <div>
                <h3 className="font-semibold text-gray-700 mb-2">Materias (mínimo 3)</h3>
                <select
                  className="w-full px-3 py-2 border border-gray-300 rounded-md mb-2"
                  onChange={handleAreaChange}
                  value=""
                >
                  <option value="">Selecciona una materia</option>
                  {materias.map((materia) => (
                    <option key={materia.id} value={materia.id}>
                      {materia.nombre}
                    </option>
                  ))}
                </select>

                {/* Lista de materias seleccionadas */}
                <div className="space-y-2">
                  {selectedMaterias.map((materiaId) => {
                    const materia = materias.find(m => m.id === materiaId);
                    return materia && (
                      <div key={materiaId} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                        <span>{materia.nombre}</span>
                        <button
                          type="button"
                          onClick={() => setSelectedMaterias(selectedMaterias.filter(id => id !== materiaId))}
                          className="text-red-500 hover:text-red-700"
                        >
                          <X size={20} />
                        </button>
                      </div>
                    );
                  })}
                </div>
              </div>

              <div>
                <h3 className="font-semibold text-gray-700 mb-2">Áreas de Conocimiento</h3>
                <div className="flex space-x-2 mb-2">
                  <input
                    type="text"
                    value={nuevaArea}
                    onChange={(e) => setNuevaArea(e.target.value)}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                    placeholder="Nueva área de conocimiento"
                  />
                  <button
                    type="button"
                    onClick={handleAddArea}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    <PlusCircle size={20} />
                  </button>
                </div>

                {/* Lista de áreas personalizadas */}
                <div className="space-y-2">
                  {selectedAreas.map((area, index) => (
                    <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                      <span>{area}</span>
                      <button
                        type="button"
                        onClick={() => setSelectedAreas(selectedAreas.filter((_, i) => i !== index))}
                        className="text-red-500 hover:text-red-700"
                      >
                        <X size={20} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </>
          )}

          {/* Pop-up para área personalizada */}
          {showCustomAreaPopup && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white p-6 rounded-lg shadow-lg w-96">
                <h3 className="text-lg font-semibold mb-4">Agregar área personalizada</h3>
                <input
                  type="text"
                  value={customArea}
                  onChange={(e) => setCustomArea(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md mb-4"
                  placeholder="Ingresa el nombre del área"
                />
                <div className="flex justify-end gap-2">
                  <button
                    type="button"
                    onClick={() => {
                      setShowCustomAreaPopup(false);
                      setCustomArea('');
                    }}
                    className="px-4 py-2 text-gray-600 hover:text-gray-800"
                  >
                    Cancelar
                  </button>
                  <button
                    type="button"
                    onClick={handleAddCustomArea}
                    className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                  >
                    Agregar
                  </button>
                </div>
              </div>
            </div>
          )}

          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
              {error}
            </div>
          )}

          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={isLoading}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-400"
            >
              {isLoading ? 'Guardando...' : 'Guardar Cambios'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditarPerfilModal;

================
File: src/components/EditarPropuestaModal.tsx
================
'use client';

import React, { useState } from 'react';
import { X, PlusCircle } from 'lucide-react';
import { actualizarPropuesta } from '../app/utils/api';

interface Propuesta {
    id: number;
    nombre: string;
    objetivo: string;
    cantidad_alumnos: number;
    cantidad_profesores: number;
    requisitos: { id: number; descripcion: string }[];
    palabras_clave: { id: number; palabra: string }[];
    areas: { id: number; nombre: string }[];
    carrera: string;
    tipo_propuesta: string;
    datos_contacto: { id: number; dato: string }[];
    autor: {
      nombre: string;
      email: string;
      tipo: 'alumno' | 'profesor';
    };
    fecha_creacion: string;
    fecha_actualizacion: string;
  }

interface EditarPropuestaModalProps {
  propuesta: Propuesta;
  onClose: () => void;
  onUpdate: () => void;
}

const EditarPropuestaModal: React.FC<EditarPropuestaModalProps> = ({
  propuesta,
  onClose,
  onUpdate
}) => {
  const [formData, setFormData] = useState({
    nombre: propuesta.nombre,
    objetivo: propuesta.objetivo,
    cantidad_alumnos: propuesta.cantidad_alumnos,
    cantidad_profesores: propuesta.cantidad_profesores,
    tipo_propuesta: propuesta.tipo_propuesta,
    requisitos: propuesta.requisitos.map(req => req.descripcion),
    palabras_clave: propuesta.palabras_clave.map(pc => pc.palabra),
    areas: propuesta.areas.map(area => area.nombre),
    datos_contacto: propuesta.datos_contacto.map(dc => dc.dato),
  });

  const [nuevoRequisito, setNuevoRequisito] = useState('');
  const [nuevaPalabraClave, setNuevaPalabraClave] = useState('');
  const [nuevaArea, setNuevaArea] = useState('');
  const [nuevoDatoContacto, setNuevoDatoContacto] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleAddRequisito = () => {
    if (nuevoRequisito.trim()) {
      setFormData(prev => ({
        ...prev,
        requisitos: [...prev.requisitos, nuevoRequisito.trim()]
      }));
      setNuevoRequisito('');
    }
  };

  const handleRemoveRequisito = (index: number) => {
    setFormData(prev => ({
      ...prev,
      requisitos: prev.requisitos.filter((_, i) => i !== index)
    }));
  };

  const handleAddPalabraClave = () => {
    if (nuevaPalabraClave.trim()) {
      setFormData(prev => ({
        ...prev,
        palabras_clave: [...prev.palabras_clave, nuevaPalabraClave.trim()]
      }));
      setNuevaPalabraClave('');
    }
  };

  const handleRemovePalabraClave = (index: number) => {
    setFormData(prev => ({
      ...prev,
      palabras_clave: prev.palabras_clave.filter((_, i) => i !== index)
    }));
  };

  const handleAddArea = () => {
    if (nuevaArea.trim()) {
      setFormData(prev => ({
        ...prev,
        areas: [...prev.areas, nuevaArea.trim()]
      }));
      setNuevaArea('');
    }
  };

  const handleRemoveArea = (index: number) => {
    setFormData(prev => ({
      ...prev,
      areas: prev.areas.filter((_, i) => i !== index)
    }));
  };

  const handleAddDatoContacto = () => {
    if (nuevoDatoContacto.trim()) {
      setFormData(prev => ({
        ...prev,
        datos_contacto: [...prev.datos_contacto, nuevoDatoContacto.trim()]
      }));
      setNuevoDatoContacto('');
    }
  };

  const handleRemoveDatoContacto = (index: number) => {
    // No permitir eliminar el email por defecto (índice 0)
    if (index === 0) return;
    
    setFormData(prev => ({
      ...prev,
      datos_contacto: prev.datos_contacto.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');


    try {
        console.log('formData', formData);
      await actualizarPropuesta(propuesta.id, formData);
      onUpdate();
      onClose();
    } catch (err) {
      setError('Error al actualizar la propuesta. Por favor, intente de nuevo.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 overflow-y-auto">
      <div className="bg-white rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold">Editar Propuesta</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X size={24} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nombre
            </label>
            <input
              type="text"
              name="nombre"
              value={formData.nombre}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Objetivo
            </label>
            <textarea
              name="objetivo"
              value={formData.objetivo}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
              rows={4}
              required
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Cantidad de Alumnos
              </label>
              <input
                type="number"
                name="cantidad_alumnos"
                value={formData.cantidad_alumnos}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
                min={1}
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Cantidad de Profesores
              </label>
              <input
                type="number"
                name="cantidad_profesores"
                value={formData.cantidad_profesores}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
                min={1}
                required
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Tipo de Propuesta
            </label>
            <input
              type="text"
              name="tipo_propuesta"
              value={formData.tipo_propuesta}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
              required
            />
          </div>

          {/* Requisitos */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Requisitos
            </label>
            <div className="flex gap-2 mb-2">
              <input
                type="text"
                value={nuevoRequisito}
                onChange={(e) => setNuevoRequisito(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                placeholder="Nuevo requisito"
              />
              <button
                type="button"
                onClick={handleAddRequisito}
                className="p-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                <PlusCircle size={20} />
              </button>
            </div>
            <div className="space-y-2">
              {formData.requisitos.map((req, index) => (
                <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                  <span>{req}</span>
                  <button
                    type="button"
                    onClick={() => handleRemoveRequisito(index)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <X size={20} />
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Palabras Clave */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Palabras Clave
            </label>
            <div className="flex gap-2 mb-2">
              <input
                type="text"
                value={nuevaPalabraClave}
                onChange={(e) => setNuevaPalabraClave(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                placeholder="Nueva palabra clave"
              />
              <button
                type="button"
                onClick={handleAddPalabraClave}
                className="p-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                <PlusCircle size={20} />
              </button>
            </div>
            <div className="flex flex-wrap gap-2">
              {formData.palabras_clave.map((palabra, index) => (
                <span key={index} className="inline-flex items-center bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                  {palabra}
                  <button
                    type="button"
                    onClick={() => handleRemovePalabraClave(index)}
                    className="ml-2 text-blue-600 hover:text-blue-800"
                  >
                    <X size={16} />
                  </button>
                </span>
              ))}
            </div>
          </div>

          {/* Áreas */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Áreas
            </label>
            <div className="flex gap-2 mb-2">
              <input
                type="text"
                value={nuevaArea}
                onChange={(e) => setNuevaArea(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                placeholder="Nueva área"
              />
              <button
                type="button"
                onClick={handleAddArea}
                className="p-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                <PlusCircle size={20} />
              </button>
            </div>
            <div className="flex flex-wrap gap-2">
              {formData.areas.map((area, index) => (
                <span key={index} className="inline-flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full">
                  {area}
                  <button
                    type="button"
                    onClick={() => handleRemoveArea(index)}
                    className="ml-2 text-green-600 hover:text-green-800"
                  >
                    <X size={16} />
                  </button>
                </span>
              ))}
            </div>
          </div>

          {/* Datos de Contacto */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Datos de Contacto
            </label>
            <div className="flex gap-2 mb-2">
              <input
                type="text"
                value={nuevoDatoContacto}
                onChange={(e) => setNuevoDatoContacto(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md"
                placeholder="Nuevo dato de contacto"
              />
              <button
                type="button"
                onClick={handleAddDatoContacto}
                className="p-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                <PlusCircle size={20} />
              </button>
            </div>
            <div className="space-y-2">
              {formData.datos_contacto.map((dato, index) => (
                <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
                  <span>{dato}</span>
                  {index !== 0 && (
                    <button
                      type="button"
                      onClick={() => handleRemoveDatoContacto(index)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <X size={20} />
                    </button>
                  )}
                </div>
              ))}
            </div>
          </div>

          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
              {error}
            </div>
          )}

          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={isLoading}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-400"
            >
              {isLoading ? 'Guardando...' : 'Guardar Cambios'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditarPropuestaModal;

================
File: src/components/Footer.tsx
================
import React from 'react';

const Footer = () => {
  return (
    <div className='mx-2 footer p-1 mb-4 bg-secondary rounded-xl gap-2 grid grid-cols-5 m-auto items-center justify-center sticky bottom-0'>
      <p className="col-span-5 text-center text-oscure">© 2024 SGITT. Todos los derechos reservados.</p>
    </div>
  );
}

export default Footer;

================
File: src/components/HeaderAdmin.tsx
================
import React from "react";
import { RxDashboard } from "react-icons/rx";
import { FiBell } from "react-icons/fi";

const HeaderAdmin = () => {
  return (
    <div className="flex justify-between py-5 px-10  border-b border-secondary">
      <h1 className="font-bold text-primary text-xl uppercase flex items-center gap-3">
        Bienvenido a la vista de Adminitrador, {" "} 
        <span className="text-help2">SGITT</span>
      </h1>
      <div className="flex gap-2">
        <RxDashboard className="text-4xl border-2 border-help3 p-2 rounded-lg hover:bg-secondary duration-300 cursor-pointer" />
        <FiBell className="text-4xl border-2 border-help3 p-2 rounded-lg hover:bg-secondary duration-300 cursor-pointer" />
      </div>
    </div>
  );
}

export default HeaderAdmin;

================
File: src/components/HelpCenter.tsx
================
import React, { useState } from 'react';
import {
  Book,
  HelpCircle,
  FileQuestion,
  Shield,
  AlertCircle,
  ChevronRight,
  Mail,
  Phone,
  MessageSquare
} from 'lucide-react';

export default function HelpCenter() {
  const [selectedSection, setSelectedSection] = useState('guide');

  const sections = {
    guide: {
      title: 'Guía de Inicio',
      content: (
        <div className="space-y-6">
          <h3 className="text-xl font-semibold">Bienvenido a SGITT</h3>
          <div className="space-y-4">
            <div className="p-4 bg-blue-50 rounded-lg">
              <h4 className="font-medium mb-2">1. Registro y Verificación</h4>
              <p>Si eres Alumno: Comienza creando tu cuenta y verificando tu correo institucional. Si eres profesor: Ingresa al sistema con las credenciales proporcionadas y crea una nueva contraseña </p>
            </div>
            <div className="p-4 bg-blue-50 rounded-lg">
              <h4 className="font-medium mb-2">2. Completar Perfil</h4>
              <p>Añade tus áreas de interés para que alumnos y profesores te puedan encontrar.</p>
            </div>
            <div className="p-4 bg-blue-50 rounded-lg">
              <h4 className="font-medium mb-2">3. Explorar Propuestas</h4>
              <p>Navega por las propuestas disponibles utilizando los filtros de búsqueda.</p>
            </div>
            <div className="p-4 bg-blue-50 rounded-lg">
              <h4 className="font-medium mb-2">4. Busca profesores o alumnos</h4>
              <p>Puedes utilizar el buscador para ingresar el objetivo o la idea de tu propuesta y encontrar alumnos o profesores relacionados de acuerdo a sus áreas de interés.</p>
            </div>
          </div>
        </div>
      )
    },
    faq: {
      title: 'Preguntas Frecuentes',
      content: (
        <div className="space-y-4">
          <div className="border-b pb-4">
            <h4 className="font-medium mb-2">¿Cómo puedo cambiar mi contraseña?</h4>
            <p className="text-gray-600">Dirígete a la sección de perfil y selecciona la opción "Cambiar contraseña".</p>
          </div>
          <div className="border-b pb-4">
            <h4 className="font-medium mb-2">¿Puedo modificar una propuesta ya publicada?</h4>
            <p className="text-gray-600">Sí, los autores pueden editar sus propuestas en cualquier momento desde la sección "Mis Propuestas".</p>
          </div>
          <div className="border-b pb-4">
            <h4 className="font-medium mb-2">¿Cómo contacto a un profesor?</h4>
            <p className="text-gray-600">Puedes usar el sistema de mensajería interno o los datos de contacto proporcionados en la propuesta.</p>
          </div>
          <div className="border-b pb-4">
            <h4 className="font-medium mb-2">¿Cuántas propuestas puedo crear?</h4>
            <p className="text-gray-600">No hay límite en el número de propuestas que puedes crear como profesor. Como alumno esta limitado a 3</p>
          </div>
        </div>
      )
    },
    support: {
      title: 'Soporte Técnico',
      content: (
        <div className="space-y-6">
          <div className="bg-blue-50 p-6 rounded-lg">
            <h3 className="font-semibold mb-4">Contacto de Soporte</h3>
            <div className="space-y-4">
              <div className="flex items-center gap-3">
                <Mail className="text-blue-600" />
                <p>soporte@sgitt.ipn.mx</p>
              </div>
              <div className="flex items-center gap-3">
                <Phone className="text-blue-600" />
                <p>55-1234-5678</p>
              </div>
              <div className="flex items-center gap-3">
                <MessageSquare className="text-blue-600" />
                <p>Chat en vivo (L-V 9:00-18:00)</p>
              </div>
            </div>
          </div>
          <div className="p-4 border rounded-lg">
            <h4 className="font-medium mb-2">Horario de Atención</h4>
            <p>Lunes a Viernes: 9:00 - 18:00<br />Sábados: 9:00 - 13:00</p>
          </div>
        </div>
      )
    },
    rules: {
      title: 'Reglamento y Normativas',
      content: (
        <div className="space-y-6">
          <div className="p-4 border rounded-lg">
            <h4 className="font-medium mb-2">Normativas Generales</h4>
            <ul className="list-disc list-inside space-y-2 text-gray-600">
              <li>Uso apropiado de la plataforma</li>
              <li>Respeto a la propiedad intelectual</li>
              <li>Privacidad y protección de datos</li>
              <li>Código de conducta</li>
            </ul>
          </div>
          <div className="p-4 border rounded-lg">
            <h4 className="font-medium mb-2">Requisitos de Propuestas</h4>
            <ul className="list-disc list-inside space-y-2 text-gray-600">
              <li>Formato y estructura</li>
              <li>Contenido académico</li>
              <li>Plazos y fechas límite</li>
              <li>Proceso de aprobación</li>
            </ul>
          </div>
          <div className="p-4 border rounded-lg">
            <h4 className="font-medium mb-2">Documentos Importantes</h4>
            <ul className="list-disc list-inside space-y-2 text-gray-600">
              <li>Reglamento de Titulación</li>
              <li>Lineamientos de Trabajo Terminal</li>
              <li>Políticas de Uso</li>
            </ul>
          </div>
        </div>
      )
    },
    report: {
      title: 'Reportar Problema',
      content: (
        <div className="space-y-6">
          <form className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Tipo de Problema</label>
              <select className="w-full p-2 border rounded-lg">
                <option>Error técnico</option>
                <option>Problema de acceso</option>
                <option>Contenido inapropiado</option>
                <option>Otro</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Descripción</label>
              <textarea 
                className="w-full p-2 border rounded-lg h-32" 
                placeholder="Describe el problema en detalle..."
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Correo de Contacto</label>
              <input 
                type="email" 
                className="w-full p-2 border rounded-lg"
                placeholder="tu@email.com"
              />
            </div>
            <button className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors">
              Enviar Reporte
            </button>
          </form>
          <div className="text-sm text-gray-500 text-center">
            Nos pondremos en contacto contigo lo antes posible
          </div>
        </div>
      )
    }
  };

  const navigation = [
    { id: 'guide', name: 'Guía de Inicio', icon: Book },
    { id: 'faq', name: 'Preguntas Frecuentes', icon: FileQuestion },
    //{ id: 'support', name: 'Soporte Técnico', icon: HelpCircle },
    //{ id: 'rules', name: 'Reglamento y Normativas', icon: Shield },
    { id: 'report', name: 'Reportar Problema', icon: AlertCircle },
  ];

  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <div className="md:grid md:grid-cols-5">
          {/* Sidebar de navegación */}
          <div className="md:col-span-1 bg-gray-50 p-4">
            <nav className="space-y-2">
              {navigation.map((item) => (
                <button
                  key={item.id}
                  onClick={() => setSelectedSection(item.id)}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                    selectedSection === item.id
                      ? 'bg-blue-50 text-blue-600'
                      : 'hover:bg-gray-100 text-gray-700'
                  }`}
                >
                  <item.icon className="h-5 w-5" />
                  <span className="text-sm font-medium">{item.name}</span>
                  {selectedSection === item.id && (
                    <ChevronRight className="ml-auto h-5 w-5" />
                  )}
                </button>
              ))}
            </nav>
          </div>

          {/* Contenido principal */}
          <div className="md:col-span-4 p-8">
            <h2 className="text-2xl font-bold mb-6">
              {sections[selectedSection as keyof typeof sections].title}
            </h2>
            {sections[selectedSection as keyof typeof sections].content}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/InfoAdmin.tsx
================
import React from "react";
import { FaArrowUp, FaChartBar, FaArrowDown, FaMoneyBillAlt } from "react-icons/fa";
import { MdMoneyOff } from "react-icons/md";

export const cardData = [
  {
    title: "Average Revenue",
    revenue: "$129K",
    growth: {
      percentage: "0.5%",
      icon: FaArrowUp,
      color: "text-green-700",
    },
    image: FaMoneyBillAlt,
    bgColor: "bg-green-50",
    linkText: "Click now",
    linkHref: "#",
  },
  {
    title: "Total Sales",
    revenue: "$500K",
    growth: {
      percentage: "1.2%",
      icon: FaArrowUp,
      color: "text-green-700",
    },
    image: FaChartBar,
    bgColor: "bg-yellow-50",
    linkText: "View details",
    linkHref: "#",
  },
  {
    title: "Monthly Profit",
    revenue: "$75K",
    growth: {
      percentage: "-0.8%",
      icon: FaArrowDown,
      color: "text-red-700",
    },
    image: MdMoneyOff,
    bgColor: "bg-blue-50",
    linkText: "See report",
    linkHref: "#",
  },
];

const InfoAdmin = () => {
  return (
    <div className="w-[350px]">
      <h3 className="table-title">Otros resultados</h3>
      <div className="flex flex-col gap-4">
        {cardData.map((item, index) => (
          <div key={index} className={`rounded-md overflow-hidden shadow-md ${item.bgColor}`}>
            <div className="flex items-center gap-4 p-4">
              <div className="bg-white p-3 rounded-full">
                {React.createElement(item.image, { className: "text-2xl" })}
              </div>
              <div>
                <h3 className="font-semibold">{item.title}</h3>
                <p className="text-gray-500">{item.revenue}</p>
              </div>
            </div>
            <div className="flex items-center justify-between p-4 bg-white">
              <div className="flex items-center gap-2">
                {React.createElement(item.growth.icon, { className: item.growth.color })}
                <p className={item.growth.color}>{item.growth.percentage}</p>
              </div>
              <a 
                href={item.linkHref} 
                className="text-secondary font-semibold hover:underline" 
                style={{ textDecoration: 'none' }}
              >
                {item.linkText}
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default InfoAdmin;

================
File: src/components/Landing.tsx
================
'use client'
import React from 'react';
import { useRouter } from 'next/navigation'
import { BiSearchAlt } from 'react-icons/bi'
import { FiClock } from "react-icons/fi";
import { FaComputer } from "react-icons/fa6";

const Landing: React.FC = () => {
  const router = useRouter();

  const handleLogin = (): void => {
    router.push('/login');
  };

  const handleRegister = (): void => {
    router.push('/registro');
  };

  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-b from-white to-gray-100">
      <main className="flex-grow flex items-center justify-center p-4 sm:p-8">
        <div className="w-full max-w-4xl">
          <div className='propDiv flex justify-center items-center'>
            <div className='group propUnica w-full sm:w-4/5 md:w-3/4 lg:w-2/3 p-8 sm:p-10 bg-white rounded-2xl hover:bg-secondary transition-all duration-300 shadow-xl hover:shadow-2xl'>
              <div className='space-y-6'>
                <h1 className='text-3xl sm:text-4xl font-bold text-black group-hover:text-white transition-colors'>Bienvenido a SGITT</h1>
                <h2 className='text-xl sm:text-2xl font-semibold text-gray-700 group-hover:text-gray-200 transition-colors'>Sistema de Gestión Integral de Trabajos Terminales</h2>
                <p className='text-lg text-gray-600 pt-5 border-t-2 mt-5 group-hover:text-white transition-colors'>
                  Inicia sesión o regístrate para comenzar
                </p>
                <div className='space-y-4 mt-8'>
                  <button 
                    className='border-2 rounded-xl block p-4 w-full text-lg font-semibold bg-transparent hover:bg-white text-black group-hover:text-white hover:text-black transition-colors'
                    onClick={handleLogin}
                  >
                    Iniciar Sesión
                  </button>
                  <button 
                    className='border-2 rounded-xl block p-4 w-full text-lg font-semibold bg-transparent hover:bg-white text-black group-hover:text-white hover:text-black transition-colors'
                    onClick={handleRegister}
                  >
                    Registrarse
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

export default Landing;

================
File: src/components/Layout.tsx
================
'use client';
import React, { useState } from 'react';
import Navbar from './Navbar';
import Sidebar from './SideBar';
import Footer from './Footer';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar toggleSidebar={toggleSidebar} />
      <Sidebar isCollapsed={isSidebarCollapsed} />
      
      <main className={`transition-all duration-300 ${isSidebarCollapsed ? 'ml-16' : 'ml-64'} pt-16`}>
        <div className="p-6">
          {children}
        </div>
      </main>
      
      <div className={`transition-all duration-300 ${isSidebarCollapsed ? 'ml-16' : 'ml-64'}`}>
        <Footer />
      </div>
    </div>
  );
};

export default Layout;

================
File: src/components/Login.tsx
================
"use client";

import React, { useState } from 'react'
import { login } from '../app/utils/api'
import { UserIcon, KeyIcon, ArrowLeft } from 'lucide-react'
import Link from 'next/link'

const Login: React.FC = () => {
  const [credentials, setCredentials] = useState({ email: '', password: '' })
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value })
  }

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
  
    try {
      const response = await login(credentials);
      console.log(response);
      //print response
      console.log(response.access);
      console.log(response.user_email);

      // Save tokens to localStorage
      localStorage.setItem('refreshToken', response.refresh);
      localStorage.setItem('accessToken', response.access);
      localStorage.setItem('userEmail', response.user_email);
      localStorage.setItem('user-Type', response.user_type);
      
      // Redirect to dashboard
      window.location.href = '/home';
    } catch (error) {
      console.error(error);
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError('Ocurrió un error al iniciar sesión. Por favor, intente de nuevo.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-white">
      <main className="flex-grow flex items-center justify-center px-4">
        <div className="max-w-4xl w-full space-y-8">
          <div className='buscadorDiv grid gap-10 bg-secondary rounded-lg p-[3rem]'>
            <Link href="/" className="flex items-center text-oscure hover:text-primary transition-colors">
              <ArrowLeft size={20} className="mr-2" />
              Volver al inicio
            </Link>
            <h1 className='text-3xl font-bold text-center text-oscure'>Bienvenido</h1>
            <p className='text-center text-gray-600'>Ingresa tus credenciales para iniciar sesión</p>
            <form onSubmit={handleSubmit}>
              <div className='primerDiv flex flex-col justify-between items-center rounded-xl gap-4 p-5 shadow-sm shadow-oscure bg-white'>
                <div className='flex gap-2 items-center w-full relative'>
                  <UserIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                  <input
                    type="text"
                    name="email"
                    value={credentials.email}
                    onChange={handleChange}
                    className='bg-transparent text-oscure focus:outline-none w-full pl-10'
                    placeholder='Ingresa tu correo'
                    required
                  />
                </div>
                <div className='flex gap-2 items-center w-full relative'>
                  <KeyIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                  <input
                    type="password"
                    name="password"
                    value={credentials.password}
                    onChange={handleChange}
                    className='bg-transparent text-oscure focus:outline-none w-full pl-10'
                    placeholder='Ingresa tu contraseña'
                    required
                  />
                </div>
                {error && (
                  <div className="w-full p-4 bg-red-100 border border-red-400 text-red-700 rounded">
                    {error}
                  </div>
                )}
                <button 
                  type="submit"
                  className='bg-oscure w-full p-3 rounded-xl text-white cursor-pointer hover:bg-primary'
                  disabled={isLoading}
                >
                  {isLoading ? 'Iniciando sesión...' : 'Iniciar sesión'}
                </button>
              </div>
            </form>
          </div>
        </div>
      </main>
    </div>
  )
}

export default Login

================
File: src/components/MainAdmin.tsx
================
import React from "react";
import HeaderAdmin from "./HeaderAdmin";
import TablesAdmin from "./TablesAdmin";
import ChartAdmin from "./ChartAdmin";
import InfoAdmin from "./InfoAdmin";

const MainAdmin = () => {
  return (
    <div className="flex-1">
      <HeaderAdmin />
      <TablesAdmin />
    </div>
  );
}

export default MainAdmin;

================
File: src/components/MainProfile.tsx
================
'use client';
import React, { useState, useEffect } from 'react';
import { LuPencilLine } from "react-icons/lu";
import { obtenerPerfilAlumno, obtenerPerfilProfesor } from '../app/utils/api';
import EditarPerfilModal from './EditarPerfilModal';
import alumnoIcono from '../utils/alumno_icono.png';
import profesorIcono from '../utils/profesor_icono.png';
import Image from 'next/image';


// Mantener las mismas interfaces
interface BaseUserData {
  email: string;
  nombre: string;
  apellido_paterno?: string;
  apellido?: string;
}

interface AlumnoData extends BaseUserData {
  apellido_materno: string;
  boleta: string;
  carrera: string;
  plan_estudios: string;
  areas_alumno: Array<{id: number, nombre: string}>;
  email: string;
  nombre: string;
}

interface ProfesorData extends BaseUserData {
  materias: Array<{id: number, nombre: string}>;
  areas_profesor: Array<{id: number, nombre: string}>; 
  apellido_materno: string; 
  apellido_paterno: string;
  es_profesor: boolean;
}

const MainProfile = () => {
    const [userData, setUserData] = useState<AlumnoData | ProfesorData | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [userType, setUserType] = useState<'alumno' | 'profesor' | null>(null);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);

    const fetchUserData = async () => {
        try {
            const storedUserType = localStorage.getItem('user-Type');
            setUserType(storedUserType as 'alumno' | 'profesor');

            if (!storedUserType) {
                throw new Error('Tipo de usuario no encontrado');
            }

            const data = storedUserType === 'alumno' 
                ? await obtenerPerfilAlumno()
                : await obtenerPerfilProfesor();
            
            setUserData(data);
        } catch (err) {
            if (err instanceof Error) {
                setError(err.message);
            } else {
                setError('Error al cargar los datos del usuario');
            }
            console.error('Error:', err);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchUserData();
    }, []);

    useEffect(() => {
        const fetchUserData = async () => {
            try {
                const storedUserType = localStorage.getItem('user-Type');
                setUserType(storedUserType as 'alumno' | 'profesor');

                if (!storedUserType) {
                    throw new Error('Tipo de usuario no encontrado');
                }

                const data = storedUserType === 'alumno' 
                    ? await obtenerPerfilAlumno()
                    : await obtenerPerfilProfesor();
                
                setUserData(data);
            } catch (err) {
                if (err instanceof Error) {
                    setError(err.message);
                } else {
                    setError('Error al cargar los datos del usuario');
                }
                console.error('Error:', err);
            } finally {
                setIsLoading(false);
            }
        };

        fetchUserData();
    }, []);

    if (isLoading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-primary"></div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
                    {error}
                </div>
            </div>
        );
    }

    const renderUserProfile = () => {
        if (!userData || !userType) return null;

        if (userType === 'alumno') {
            const alumnoData = userData as AlumnoData;
            return (
                <div className="space-y-8">
                    <div className="bg-white p-6 rounded-lg shadow-sm">
                        <h2 className="text-2xl font-semibold mb-6 text-primary">Información Personal</h2>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <div className="space-y-4">
                                <div className="bg-gray-50 p-4 rounded-lg">
                                    <h3 className="font-semibold text-gray-700 mb-4">Datos Básicos</h3>
                                    <div className="space-y-2">
                                        <p><strong>Nombre:</strong> {alumnoData.nombre}</p>
                                        <p><strong>Apellido Paterno:</strong> {alumnoData.apellido_paterno}</p>
                                        <p><strong>Apellido Materno:</strong> {alumnoData.apellido_materno}</p>
                                        <p><strong>Email:</strong> {alumnoData.email}</p>
                                    </div>
                                </div>
                            </div>

                            <div className="space-y-4">
                                <div className="bg-gray-50 p-4 rounded-lg">
                                    <h3 className="font-semibold text-gray-700 mb-4">Información Académica</h3>
                                    <div className="space-y-2">
                                        <p><strong>Boleta:</strong> {alumnoData.boleta}</p>
                                        <p><strong>Carrera:</strong> {alumnoData.carrera}</p>
                                        <p><strong>Plan de Estudios:</strong> {alumnoData.plan_estudios}</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="mt-8">
                            <h3 className="font-semibold text-gray-700 mb-4">Áreas de Interés</h3>
                            <div className="flex flex-wrap gap-2">
                                {alumnoData.areas_alumno && alumnoData.areas_alumno.length > 0 ? (
                                    alumnoData.areas_alumno.map((area) => (
                                        <span key={area.id} className="px-4 py-2 bg-blue-100 text-blue-800 rounded-full">
                                            {area.nombre}
                                        </span>
                                    ))
                                ) : (
                                    <p className="text-gray-500">No hay áreas de interés registradas</p>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        if (userType === 'profesor') {
            const profesorData = userData as ProfesorData;
            return (
                <div className="space-y-8">
                    <div className="bg-white p-6 rounded-lg shadow-sm">
                        <h2 className="text-2xl font-semibold mb-6 text-primary">Información Personal</h2>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h3 className="font-semibold text-gray-700 mb-4">Datos Básicos</h3>
                                <div className="space-y-2">
                                    <p><strong>Nombre:</strong> {profesorData.nombre}</p>
                                    <p><strong>Apellido Paterno:</strong> {profesorData.apellido_paterno}</p>
                                    <p><strong>Apellido Materno:</strong> {profesorData.apellido_materno}</p>
                                    <p><strong>Email:</strong> {profesorData.email}</p>
                                </div>
                            </div>
        
                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h3 className="font-semibold text-gray-700 mb-4">Materias Impartidas</h3>
                                <div className="flex flex-wrap gap-2">
                                    {profesorData.materias && profesorData.materias.length > 0 ? (
                                        profesorData.materias.map((materia) => (
                                            <span key={materia.id} className="px-4 py-2 bg-green-100 text-green-800 rounded-full">
                                                {materia.nombre}
                                            </span>
                                        ))
                                    ) : (
                                        <p className="text-gray-500">No hay materias registradas</p>
                                    )}
                                </div>
                            </div>
                        </div>
        
                        {/* Nueva sección para áreas de conocimiento */}
                        <div className="mt-8">
                            <h3 className="font-semibold text-gray-700 mb-4">Áreas de Conocimiento</h3>
                            <div className="flex flex-wrap gap-2">
                                {profesorData.areas_profesor && profesorData.areas_profesor.length > 0 ? (
                                    profesorData.areas_profesor.map((area) => (
                                        <span key={area.id} className="px-4 py-2 bg-blue-100 text-blue-800 rounded-full">
                                            {area.nombre}
                                        </span>
                                    ))
                                ) : (
                                    <p className="text-gray-500">No hay áreas de conocimiento registradas</p>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            );
        }
    };

    return (
        <div className="max-w-7xl mx-auto">

            <div className="flex flex-col md:flex-row md:items-center gap-8 mb-8">
                <Image
                    src={userType === 'alumno' ? alumnoIcono : profesorIcono}
                    alt="Perfil"
                    className="w-28 h-28 object-cover rounded-full"
                />
                <div className="flex-grow">
                    <h2 className="text-2xl font-semibold mb-2">
                        {userData && (userType === 'alumno' 
                            ? `${(userData as AlumnoData).nombre} ${(userData as AlumnoData).apellido_paterno} ${(userData as AlumnoData).apellido_materno}`
                            : `${(userData as ProfesorData).nombre} ${(userData as ProfesorData).apellido_paterno} ${(userData as ProfesorData).apellido_materno}`
                        )}
                    </h2>
                    <span className="text-lg text-gray-500 capitalize">{userType}</span>
                </div>
                <button 
                onClick={() => setIsEditModalOpen(true)}
                className="py-2 px-4 rounded bg-secondary hover:bg-primary transition-colors text-white flex items-center gap-2"
                >
                <LuPencilLine /> Editar Perfil
                </button>
            </div>

            {renderUserProfile()}
            {/* Modal de edición */}
            {userData && userType && (
                <EditarPerfilModal
                    isOpen={isEditModalOpen}
                    onClose={() => setIsEditModalOpen(false)}
                    onUpdate={fetchUserData}
                    userType={userType}
                    currentData={userData}
                />
            )}
        </div>

        
    );  
    
   
};

export default MainProfile;

================
File: src/components/MisPropuestas.tsx
================
'use client';

import React, { useEffect, useState } from 'react';
import { obtenerPropuestasUsuario , eliminarPropuesta  } from '../app/utils/api';
import { useRouter } from 'next/navigation';
import axios from 'axios';
import { Plus , Edit2 , Trash2  } from 'lucide-react';
import EditarPropuestaModal from './EditarPropuestaModal';
import ConfirmDeleteModal from './ConfirmDeleteModal';

interface Propuesta {
  id: number;
  nombre: string;
  objetivo: string;
  cantidad_alumnos: number;
  cantidad_profesores: number;
  requisitos: { id: number; descripcion: string }[];
  palabras_clave: { id: number; palabra: string }[];
  areas: { id: number; nombre: string }[];
  carrera: string;
  tipo_propuesta: string;
  datos_contacto: { id: number; dato: string }[];
  autor: {
    nombre: string;
    email: string;
    tipo: 'alumno' | 'profesor';
  };
  fecha_creacion: string;
  fecha_actualizacion: string;
}


interface MisPropuestasProps {}

const MisPropuestas: React.FC<MisPropuestasProps> = () => {
  const [propuestas, setPropuestas] = useState<Propuesta[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isUnauthorized, setIsUnauthorized] = useState(false);
  const router = useRouter();
  const [propuestaEditar, setPropuestaEditar] = useState<Propuesta | null>(null);
  const [propuestaEliminar, setPropuestaEliminar] = useState<Propuesta | null>(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);


  useEffect(() => {
    const fetchPropuestas = async () => {
      try {
        const data = await obtenerPropuestasUsuario();
        setPropuestas(data);
      } catch (err) {
        console.error('Error completo:', err);
        if (axios.isAxiosError(err)) {
          if (err.response?.status === 401) {
            setError('No estás autorizado para ver esta información. Por favor, inicia sesión nuevamente.');
            setIsUnauthorized(true);
          } else {
            setError(err.response?.data?.message || `Error del servidor: ${err.response?.status}`);
          }
        } else {
          setError('Error inesperado. Por favor, intenta de nuevo más tarde.');
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchPropuestas();
  }, [router]);

  const handleLoginRedirect = () => {
    router.push('/login');
  };

  const recargarPropuestas = async () => {
    try {
      const data = await obtenerPropuestasUsuario();
      setPropuestas(data);
    } catch (err) {
      console.error('Error al recargar propuestas:', err);
    }
  };

  const handleEliminarPropuesta = async () => {
    if (!propuestaEliminar) return;
    
    try {
      await eliminarPropuesta(propuestaEliminar.id);
      await recargarPropuestas();
      setIsDeleteModalOpen(false);
      setPropuestaEliminar(null);
    } catch (err) {
      console.error('Error al eliminar la propuesta:', err);
      // Opcionalmente, puedes mostrar un mensaje de error al usuario
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[60vh]">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-[60vh]">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <strong className="font-bold">Error: </strong>
          <span className="block sm:inline">{error}</span>
          {isUnauthorized && (
            
            <>
      <br />
      <div className="flex justify-center">
        <button
          onClick={handleLoginRedirect}
          className="mt-4 bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-6 rounded-lg shadow-lg transition duration-200 transform hover:scale-105"
        >
          Ir al Login
        </button>
      </div>
    </>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto">
      <h1 className="text-3xl font-bold mb-6">Mis Propuestas</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Tarjeta de Agregar Nueva Propuesta - Siempre visible */}
        <button
          onClick={() => router.push('/propuesta/crear')}
          className="bg-white shadow-md rounded-lg p-6 border-2 border-dashed border-gray-300 hover:border-primary group transition-all duration-300 min-h-[250px] flex flex-col items-center justify-center cursor-pointer"
        >
          <div className="w-16 h-16 rounded-full bg-gray-100 group-hover:bg-primary/10 flex items-center justify-center transition-colors duration-300">
            <Plus 
              size={30} 
              className="text-gray-400 group-hover:text-primary transition-colors duration-300" 
            />
          </div>
          <p className="mt-4 text-lg font-medium text-gray-600 group-hover:text-primary transition-colors duration-300">
            Agregar Nueva Propuesta
          </p>
          <p className="mt-2 text-sm text-gray-500 text-center">
            Haz clic aquí para crear una nueva propuesta
          </p>
        </button>
  
        {/* Propuestas existentes */}
        {propuestas.map((propuesta) => (
          <div key={propuesta.id} className="bg-white shadow-md rounded-lg p-6 hover:shadow-lg transition-shadow duration-300 min-h-[250px] flex flex-col">
          <div className="flex justify-between items-start">
            <h2 className="text-xl font-semibold mb-2">{propuesta.nombre}</h2>
            <div className="flex gap-2">
              <button
                onClick={() => setPropuestaEditar(propuesta)}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                title="Editar propuesta"
              >
                <Edit2 className="w-5 h-5 text-gray-600 hover:text-primary" />
              </button>
              <button
                onClick={() => {
                  setPropuestaEliminar(propuesta);
                  setIsDeleteModalOpen(true);
                }}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                title="Eliminar propuesta"
              >
                <Trash2 className="w-5 h-5 text-gray-600 hover:text-red-500" />
              </button>
            </div>
          </div>
            <p className="text-gray-600 mb-4 flex-grow">{propuesta.objetivo}</p>
            <div className="mt-auto">
              <p className="text-sm text-gray-500">Creada el: {new Date(propuesta.fecha_creacion).toLocaleDateString()}</p>
              <p className="text-sm text-gray-500">Carrera: {propuesta.carrera}</p>
              <p><strong>Numero de alumnos: </strong> {propuesta.cantidad_alumnos}</p>
              <p><strong>Numero de profesores: </strong> {propuesta.cantidad_profesores}</p>
              <p><strong>Tipo de propuesta: </strong> {propuesta.tipo_propuesta}</p>

              <div className='mt-4'>
                <strong>Datos de Contacto:</strong>
                <div className='flex flex-wrap gap-2 mt-2'>
                  {propuesta.datos_contacto.map((dato) => (
                    <span key={dato.id} className='bg-gray-200 rounded-full px-3 py-1 text-sm'>
                      {dato.dato}
                    </span>
                  ))}
                </div>
              </div>

              <div className='mt-4'>
                <strong>Requisitos:</strong>
                <ul className='list-disc list-inside mt-2'>
                  {propuesta.requisitos.map((requisito) => (
                    <li key={requisito.id}>{requisito.descripcion}</li>
                  ))}
                </ul>
              </div>

              <div className='mt-4'>
                <strong>Áreas de conocimiento:</strong>
                <div className='flex flex-wrap gap-2 mt-2'>
                  {propuesta.areas.map((area) => (
                    <span key={area.id} className='bg-gray-200 rounded-full px-3 py-1 text-sm'>
                      {area.nombre}
                    </span>
                  ))}
                </div>
              </div>
              <div className='mt-4'>
                <strong>Palabras clave:</strong>
                <div className='flex flex-wrap gap-2 mt-2'>
                  {propuesta.palabras_clave.map((palabra) => (
                    <span key={palabra.id} className='bg-gray-200 rounded-full px-3 py-1 text-sm'>
                      {palabra.palabra}
                    </span>
                  ))}
                </div>
              </div>
              
            </div>
          </div>
        ))}
        {propuestaEditar && (
            <EditarPropuestaModal
              propuesta={propuestaEditar}
              onClose={() => setPropuestaEditar(null)}
              onUpdate={recargarPropuestas}
            />
          )}
      </div>

      {propuestaEliminar && (
        <ConfirmDeleteModal
          isOpen={isDeleteModalOpen}
          onConfirm={handleEliminarPropuesta}
          onCancel={() => {
            setIsDeleteModalOpen(false);
            setPropuestaEliminar(null);
          }}
          nombre={propuestaEliminar.nombre}
        />
      )}
  
      {propuestas.length === 0 && (
        <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mt-6" role="alert">
          <p className="font-bold">No tienes propuestas</p>
          <p>Aún no has creado ninguna propuesta. ¡Empieza creando una ahora!</p>
        </div>
      )}
    </div>
  );
};

export default MisPropuestas;

================
File: src/components/NabVar.tsx
================
'use client';
import React from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'

const NabVar = () => {
  const pathname = usePathname()

  return (
    <div className='navBar flex justify-between items-center p-[3rem]'>
      <div className='logoDiv'>
        <Link href="/home">
          <h1 className='logo text-[25px] cursor-pointer text-oscure font-bold'>SGI<span className='text-secondary '>TT</span></h1>
        </Link>
      </div>

      <div className='menu flex gap-7'>
        <Link href="/home">
          <li className={`menuList text-[#023047] hover:text-primary cursor-pointer ${pathname === '/home' ? 'text-primary' : ''}`}>Inicio</li>
        </Link>
        <Link href="/home">
          <li className={`menuList text-[#023047] hover:text-primary cursor-pointer ${pathname === '/busqueda' ? 'text-primary' : ''}`}>Búsqueda</li>
        </Link>
        <Link href="/propuesta/crear">
          <li className={`menuList text-[#023047] hover:text-primary cursor-pointer ${pathname === '/propuesta/crear' ? 'text-primary' : ''}`}>Agregar Propuesta</li>
        </Link>
        <Link href="/perfil">
          <li className={`menuList text-[#023047] hover:text-primary cursor-pointer ${pathname === '/perfil' ? 'text-primary' : ''}`}>Mi Perfil</li>
        </Link>
      </div>
    </div>
  )
}

export default NabVar

================
File: src/components/Navbar.tsx
================
'use client';
import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { IoMdMenu } from "react-icons/io";
import { BiSearchAlt } from "react-icons/bi";
import { AiOutlineMessage } from "react-icons/ai";
import { FiBell } from "react-icons/fi";

interface NavbarProps {
  toggleSidebar: () => void;
}

const Navbar: React.FC<NavbarProps> = ({ toggleSidebar }) => {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState('');

  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      router.push(`/buscador?q=${encodeURIComponent(searchQuery.trim())}`);
    }
  };

  return (
    <nav className='h-16 py-1 bg-white shadow-md sticky top-0 left-0 z-50 w-full'>
      <div className='flex items-center h-full gap-12 px-4'>
        <IoMdMenu className='text-2xl cursor-pointer hover:text-primary' onClick={toggleSidebar} />
        
        <Link href="/home" className='flex items-center gap-4 hover:opacity-80 transition-opacity'>
          <h1 className='logo text-[25px] cursor-pointer text-oscure font-bold'>
            SGI<span className='text-secondary'>TT</span>
          </h1>
        </Link>

        <form onSubmit={handleSearch} className='flex-1 max-w-xl hidden md:flex items-center relative'>
          <input
            type="search"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder='Buscar propuestas...'
            className='w-full py-2 px-4 pr-12 rounded-lg bg-gray-100 border border-secondary outline-none focus:ring-2 focus:ring-primary transition-all'
          />
          <button
            type="submit"
            className='absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-primary transition-colors'
          >
            <BiSearchAlt className='text-xl' />
          </button>
        </form>

        <div className='flex items-center gap-4 ml-auto'>
          <Link href="/chat" className='relative text-secondary hover:text-primary transition-colors'>
            <AiOutlineMessage className='text-2xl' />
            <span className='absolute -top-1 -right-1 w-2 h-2 rounded-full bg-help2'></span>
          </Link>
          
          <Link href="/notificaciones" className='relative text-secondary hover:text-primary transition-colors'>
            <FiBell className='text-2xl' />
            <span className='absolute -top-1 -right-1 w-2 h-2 rounded-full bg-help2'></span>
          </Link>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

================
File: src/components/NavBarProfile.tsx
================
// NavBarProfile.tsx
'use client';
import React, { useState } from 'react';
import { IoMdMenu } from "react-icons/io";
import { AiOutlineMessage } from "react-icons/ai";
import { FiBell } from "react-icons/fi";

interface NavBarProfileProps {
  toggleSidebar: () => void;
}

const NavBarProfile: React.FC<NavBarProfileProps> = ({ toggleSidebar }) => {
  return (
    <div>
      <nav className='h-16 py-1 bg-white shadow-md sticky top-0 left-0 z-50 w-full'>
        <div className='flex items-center h-full gap-12'>
          <IoMdMenu className='mx-4 text-2xl cursor-pointer' onClick={toggleSidebar} />
          <a href="#" className='flex items-center gap-4'>
            <h1 className='logo text-[25px] cursor-pointer text-oscure font-bold'>SGI<span className='text-secondary'>TT</span></h1>
          </a>
          <form action="" className='flex-1 max-w-lg hidden md:block'>
            <input type="search" name="buscador" id="buscador" placeholder='Realiza una busqueda' className='w-full py-2 px-4 rounded bg-gray-100 border border-secondary outline-none focus:ring-2 focus:ring-primary' />
          </form>
          <a href="#" className='ml-auto relative text-secondary hover:text-primary'>
            <AiOutlineMessage className='text-2xl' />
            <span className='absolute -top-1 w-2 h-2 rounded-full bg-help2 -left-1/8 -translate-x-1/2'></span>
          </a>
          <a href="#" className='relative text-secondary hover:text-primary ml-auto md:ml-0'>
            <FiBell className='mr-4 text-2xl' />
            <span className='absolute -top-1 w-2 h-2 rounded-full bg-help2 -left-1/8 -translate-x-1/2'></span>
          </a>
        </div>
      </nav>
    </div>
  );
};

export default NavBarProfile;

================
File: src/components/PropuestaDiv.tsx
================
'use client';
import React, { useState, useEffect } from 'react';
import { FiClock } from "react-icons/fi";
import { GiSharkFin } from "react-icons/gi";
import { obtenerPropuestas, obtenerAreas  } from '../app/utils/api';

type PropuestaType = {
  id: number;
  nombre: string;
  objetivo: string;
  cantidad_alumnos: number;
  cantidad_profesores: number;
  requisitos: { id: number; descripcion: string }[];
  palabras_clave: { id: number; palabra: string }[];
  areas: { id: number; nombre: string }[];
  carrera: string;
  tipo_propuesta: string;
  datos_contacto: { id: number; dato: string }[];
  autor: {
    nombre: string;
    email: string;
    tipo: 'alumno' | 'profesor';
  };
  fecha_creacion: string;
  fecha_actualizacion: string;
};

interface Area {
  id: number;
  nombre: string;
}

const PropuestaDiv = ({ searchTerm }: { searchTerm: string }) => {
  const [propuestas, setPropuestas] = useState<PropuestaType[]>([]);
  const [selected, setSelected] = useState<PropuestaType | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const propuestasPerPage = 4;
  const [ordenarPor, setOrdenarPor] = useState("");
  const [areaFiltro, setAreaFiltro] = useState("");
  const [carreraFiltro, setCarreraFiltro] = useState("");
  const [areas, setAreas] = useState<Area[]>([]);
 

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [propuestasData, areasData] = await Promise.all([
          obtenerPropuestas(),
          obtenerAreas()
        ]);
        setPropuestas(propuestasData);
        setAreas(areasData);
      } catch (error) {
        console.error('Error al obtener datos:', error);
      }
    };

    fetchData();
  }, []);

  const handleSelect = (propuesta: PropuestaType) => {
    setSelected(propuesta);
  };

  //const filteredPropuestas = propuestas.filter((propuesta) => 
  //propuesta.nombre.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").includes(searchTerm.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, ""))
  //);


  const aplicarFiltros = (propuestas: PropuestaType[]) => {
    let resultado = propuestas;

    // Filtro por término de búsqueda
    if (searchTerm) {
      resultado = resultado.filter((propuesta) =>
        propuesta.nombre.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")
          .includes(searchTerm.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, ""))
      );
    }

    // Filtro por área
    if (areaFiltro) {
      resultado = resultado.filter((propuesta) => 
        propuesta.areas.some(area => area.id.toString() === areaFiltro)
      );
    }

    // Filtro por carrera
    if (carreraFiltro) {
      resultado = resultado.filter((propuesta) =>
        propuesta.carrera.toLowerCase() === carreraFiltro.toLowerCase()
      );
    }

    // Ordenar
    if (ordenarPor) {
      resultado.sort((a, b) => {
        switch (ordenarPor) {
          case 'fecha':
            return new Date(b.fecha_actualizacion).getTime() - new Date(a.fecha_actualizacion).getTime();
          case 'nombre':
            return a.nombre.localeCompare(b.nombre);
          // Puedes añadir más casos de ordenación aquí
          default:
            return 0;
        }
      });
    }

    return resultado;
  };

  const filteredPropuestas = aplicarFiltros(propuestas);


  const totalPropuestas = filteredPropuestas.length;
  const totalPages = Math.ceil(totalPropuestas / propuestasPerPage);
  const startIndex = (currentPage - 1) * propuestasPerPage;
  const selectedPropuestas = filteredPropuestas.slice(startIndex, startIndex + propuestasPerPage);

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleCloseDetails = () => {
    setSelected(null);
  };

  return (
    <div className='flex flex-col items-center w-full mt-6'>
      <div className='flex flex-wrap items-center gap-4 justify-center mb-6 bg-secondary p-4 rounded-lg w-full'>
        <div className='busquedaUnica flex items-center gap-2'>
          <label htmlFor="ordenar" className='text-oscure font-bold'>Ordenar: </label>
          <select 
            id="ordenar" 
            className='bg-white rounded-md px-4 py-1'
            value={ordenarPor}
            onChange={(e) => setOrdenarPor(e.target.value)}
          >
            <option value="">Seleccionar</option>
            <option value="fecha">Fecha</option>
            <option value="nombre">Nombre</option>
          </select>
        </div>

        <div className='busquedaUnica flex items-center gap-2'>
          <label htmlFor="area" className='text-oscure font-bold'>Áreas: </label>
          <select 
            id="area" 
            className='bg-white rounded-md px-4 py-1'
            value={areaFiltro}
            onChange={(e) => setAreaFiltro(e.target.value)}
          >
            <option value="">Todas</option>
            {areas.map((area) => (
              <option key={area.id} value={area.id.toString()}>
                {area.nombre}
              </option>
            ))}
          </select>
        </div>

        <div className='busquedaUnica flex items-center gap-2'>
          <label htmlFor="carrera" className='text-oscure font-bold'>Carrera: </label>
          <select 
            id="carrera" 
            className='bg-white rounded-md px-4 py-1'
            value={carreraFiltro}
            onChange={(e) => setCarreraFiltro(e.target.value)}
          >
            <option value="">Todas</option>
            <option value="LCD">Ciencia de Datos</option>
            <option value="ISC">Sistemas Computacionales</option>
            <option value="IIA">Inteligencia Artificial</option>
          </select>
        </div>

        <button 
          className='text-oscure cursor-pointer font-bold hover:text-help2'
          onClick={() => {
            setOrdenarPor("");
            setAreaFiltro("");
            setCarreraFiltro("");
          }}
        >
          Limpiar filtros
        </button>
      </div>
      <div className='flex flex-col md:flex-row w-full'>
        <div className='w-full md:w-1/3'>
          <div className='grid grid-cols-1 gap-6 py-7'>
            {selectedPropuestas.map((propuesta) => (
              <div
                key={propuesta.id}
                onClick={() => handleSelect(propuesta)}
                className={`group propUnica p-5 bg-white rounded-xl hover:bg-secondary shadow-lg shadow-oscure-400/700 cursor-pointer flex flex-col justify-between ${selected && selected.id === propuesta.id ? 'bg-secondary' : ''}`}
              >
                <div className='flex flex-col h-full'>
                  <div className='flex justify-between items-start gap-2 mb-2'>
                    <h1 className='text-base font-semibold text-black group-hover:text-white break-words flex-grow'>{propuesta.nombre}</h1>
                    <span className='flex items-center text-gray-400 gap-1 whitespace-nowrap'>
                      <FiClock className="flex-shrink-0" /> {new Date(propuesta.fecha_actualizacion).toLocaleDateString()}
                    </span>
                  </div>
                  <p className='text-sm text-gray-400 pt-2 border-t-2 mt-2 group-hover:text-white overflow-hidden line-clamp-4 flex-grow'>
                    {propuesta.objetivo}
                  </p>
                  <p className='text-xs text-gray-500 group-hover:text-white mt-2'>
                    Autor: {propuesta.autor.nombre} ({propuesta.autor.tipo})
                  </p>
                  <p className='text-xs text-gray-500 group-hover:text-white mt-2'>
                    Carrera: {propuesta.carrera}
                  </p>
                  <div className='areas flex flex-wrap gap-2 mt-2'>
                    {propuesta.areas.slice(0, 2).map((area) => (
                      <span key={area.id} className='text-xs bg-gray-200 rounded-full px-2 py-1 truncate'>
                        {area.nombre}
                      </span>
                    ))}
                    {propuesta.areas.length > 2 && (
                      <span className='text-xs bg-gray-200 rounded-full px-2 py-1'>
                        +{propuesta.areas.length - 2}
                      </span>
                    )}
                  </div>
                  <div className='palabras-clave flex flex-wrap gap-2 mt-auto pt-2'>
                    {propuesta.palabras_clave.slice(0, 3).map((palabra) => (
                      <span key={palabra.id} className='text-xs bg-gray-200 rounded-full px-2 py-1 truncate'>
                        {palabra.palabra}
                      </span>
                    ))}
                    {propuesta.palabras_clave.length > 3 && (
                      <span className='text-xs bg-gray-200 rounded-full px-2 py-1'>
                        +{propuesta.palabras_clave.length - 3}
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {totalPages > 1 && (
            <div className='flex justify-center gap-4 mt-4'>
              <button
                onClick={handlePrevPage}
                disabled={currentPage === 1}
                className='px-4 py-2 bg-primary text-white rounded disabled:bg-gray-300'
              >
                Anterior
              </button>
              <button
                onClick={handleNextPage}
                disabled={currentPage === totalPages}
                className='px-4 py-2 bg-primary text-white rounded disabled:bg-gray-300'
              >
                Siguiente
              </button>
            </div>
          )}
        </div>

        <div className='w-full md:w-2/3 p-5'>
          {selected ? (
            <div className='bg-white p-6 rounded-lg shadow-md relative'>
              <button
                onClick={handleCloseDetails}
                className="absolute top-2 right-2 text-gray-400 hover:text-red-500"
              >
                &times;
              </button>
              <h2 className='text-2xl font-bold break-words'>{selected.nombre}</h2>
              <p className='text-gray-600 mt-2'>{selected.objetivo}</p>
              <p className='mt-2'><strong>Fecha de creación:</strong> {new Date(selected.fecha_creacion).toLocaleString()}</p>
              <p><strong>Última actualización:</strong> {new Date(selected.fecha_actualizacion).toLocaleString()}</p>
              <p className='mt-2'><strong>Autor:</strong> {selected.autor.nombre} ({selected.autor.tipo})</p>
              <p><strong>Carrera:</strong> {selected.carrera}</p>
              <p><strong>Correo:</strong> {selected.autor.email}</p>
              <p><strong>Tipo de Propuesta:</strong> {selected.tipo_propuesta}</p>
              <p><strong>Numero de alumnos: </strong> {selected.cantidad_alumnos}</p>
              <p><strong>Numero de profesores: </strong> {selected.cantidad_profesores}</p>

              <div className='mt-4'>
                <strong>Datos de Contacto:</strong>
                <div className='flex flex-wrap gap-2 mt-2'>
                  {selected.datos_contacto.map((dato) => (
                    <span key={dato.id} className='bg-gray-200 rounded-full px-3 py-1 text-sm'>
                      {dato.dato}
                    </span>
                  ))}
                </div>
              </div>

              <div className='mt-4'>
                <strong>Requisitos:</strong>
                <ul className='list-disc list-inside mt-2'>
                  {selected.requisitos.map((requisito) => (
                    <li key={requisito.id}>{requisito.descripcion}</li>
                  ))}
                </ul>
              </div>

              <div className='mt-4'>
                <strong>Áreas de conocimiento:</strong>
                <div className='flex flex-wrap gap-2 mt-2'>
                  {selected.areas.map((area) => (
                    <span key={area.id} className='bg-gray-200 rounded-full px-3 py-1 text-sm'>
                      {area.nombre}
                    </span>
                  ))}
                </div>
              </div>
              <div className='mt-4'>
                <strong>Palabras clave:</strong>
                <div className='flex flex-wrap gap-2 mt-2'>
                  {selected.palabras_clave.map((palabra) => (
                    <span key={palabra.id} className='bg-gray-200 rounded-full px-3 py-1 text-sm'>
                      {palabra.palabra}
                    </span>
                  ))}
                </div>
              </div>
              <div className='mt-5 flex justify-end gap-4'>
                <button className='bg-primary text-white px-4 py-2 rounded hover:bg-primary/80'>
                  Contactar
                </button>
                <button className='bg-secondary text-white px-4 py-2 rounded hover:bg-secondary/80'>
                  Guardar
                </button>
              </div>
            </div>
          ) : null}
        </div>
      </div>

      {totalPropuestas === 0 && (
        <div className="flex flex-col items-center justify-center h-[20rem] w-full mt-4">
          <GiSharkFin className="text-8xl mb-4" />
          <p className='text-gray-400 text-3xl text-center'>No hay resultados</p>
        </div>
      )}
    </div>
  );
};

export default PropuestaDiv;

================
File: src/components/Registro.tsx
================
"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { register ,obtenerMaterias  } from '../app/utils/api';
import { useRouter } from 'next/navigation';

interface Area {
  id: number;
  nombre: string;
}

const Register: React.FC = () => {
  const [formData, setFormData] = useState({
    nombre: '',
    apellido_paterno: '',
    apellido_materno: '',
    boleta: '',
    email: '',
    carrera: '',
    plan_estudios: '',
    password: '',
    confirmPassword: '',
    areas_ids: [] as number[],
    areas_custom: [] as string[]
  });
  const [areas, setAreas] = useState<Area[]>([]);
  const [customArea, setCustomArea] = useState('');
  const [error, setError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [areaError, setAreaError] = useState('');
  const [registrationSuccess, setRegistrationSuccess] = useState(false);
  const [showCustomAreaPopup, setShowCustomAreaPopup] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const fetchAreas = async () => {
      try {
        const areasData = await obtenerMaterias();
        setAreas(areasData);
      } catch (error) {
        console.error('Error al cargar áreas:', error);
      }
    };
    fetchAreas();
  }, []);

  const handleSubmit = useCallback(async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    setAreaError('');
    
    if (formData.password !== formData.confirmPassword) {
      setPasswordError('Las contraseñas no coinciden');
      return;
    }

    const totalAreas = formData.areas_ids.length + formData.areas_custom.length;
    if (totalAreas < 3) {
      setAreaError('Debes seleccionar o agregar al menos 3 áreas de conocimiento');
      return;
    }

    try {
      const response = await register(formData);
      console.log(response);
      setRegistrationSuccess(true);
      setTimeout(() => {
        router.push('/');
      }, 5000);
    } catch (error) {
      console.error(error);
      setError('Error al registrar. Por favor, intente nuevamente.');
    }
  }, [formData, router]);

  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prevData => ({ ...prevData, [name]: value }));
  }, []);

  const handleAreaChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (value === 'other') {
      setShowCustomAreaPopup(true);
      e.target.value = ''; // Reset select value
      return;
    }
    
    const areaId = parseInt(value);
    if (!formData.areas_ids.includes(areaId)) {
      setFormData(prevData => ({
        ...prevData,
        areas_ids: [...prevData.areas_ids, areaId]
      }));
    }
  }, [formData.areas_ids]);

  const handleAddCustomArea = () => {
    if (customArea.trim() && !formData.areas_custom.includes(customArea.trim())) {
      setFormData(prevData => ({
        ...prevData,
        areas_custom: [...prevData.areas_custom, customArea.trim()]
      }));
      setCustomArea('');
      setShowCustomAreaPopup(false);
    }
  };

  const removeArea = (id: number) => {
    setFormData(prevData => ({
      ...prevData,
      areas_ids: prevData.areas_ids.filter(areaId => areaId !== id)
    }));
  };

  const removeCustomArea = (area: string) => {
    setFormData(prevData => ({
      ...prevData,
      areas_custom: prevData.areas_custom.filter(customArea => customArea !== area)
    }));
  };

  useEffect(() => {
    if (formData.password === formData.confirmPassword) {
      setPasswordError('');
    } else if (formData.confirmPassword !== '') {
      setPasswordError('Las contraseñas no coinciden');
    }
  }, [formData.password, formData.confirmPassword]);

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-b from-white to-gray-100 p-4">
      <div className="w-full max-w-md bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-shadow duration-300 p-8">
        {registrationSuccess ? (
          <div className="text-center">
            <h2 className="text-2xl font-bold mb-4">¡Registro Exitoso!</h2>
            <p className="mb-4">Se ha enviado un correo de verificación a tu dirección de email.</p>
            <p>Por favor, verifica tu correo para activar tu cuenta.</p>
            <p className="mt-4 text-sm text-gray-500">Serás redirigido a la página de inicio en 5 segundos...</p>
          </div>
        ) : (
          <>
            <h2 className="text-3xl font-bold text-center text-gray-800 mb-2">Registro</h2>
            <p className="text-center text-gray-600 mb-8">Crea una nueva cuenta</p>
            <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="nombre" className="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
            <input
              id="nombre"
              name="nombre"
              type="text"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.nombre}
              onChange={handleChange}
            />
          </div>
          <div>
            <label htmlFor="apellido_paterno" className="block text-sm font-medium text-gray-700 mb-1">Apellido Paterno</label>
            <input
              id="apellido_paterno"
              name="apellido_paterno"
              type="text"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.apellido_paterno}
              onChange={handleChange}
            />
          </div>
          <div>
            <label htmlFor="apellido_materno" className="block text-sm font-medium text-gray-700 mb-1">Apellido Materno</label>
            <input
              id="apellido_materno"
              name="apellido_materno"
              type="text"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.apellido_materno}
              onChange={handleChange}
            />
          </div>
          <div>
            <label htmlFor="boleta" className="block text-sm font-medium text-gray-700 mb-1">Boleta</label>
            <input
              id="boleta"
              name="boleta"
              type="text"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.boleta}
              onChange={handleChange}
            />
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Correo</label>
            <input
              id="email"
              name="email"
              type="email"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.email}
              onChange={handleChange}
            />
          </div>
          
          {/* Nuevos campos de contraseña */}
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">Contraseña</label>
            <input
              id="password"
              name="password"
              type="password"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.password}
              onChange={handleChange}
            />
          </div>
          <div>
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">Confirmar Contraseña</label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.confirmPassword}
              onChange={handleChange}
            />
          </div>
          
          {passwordError && (
            <div className="text-red-500 text-sm">{passwordError}</div>
          )}
          
          <div>
            <label htmlFor="carrera" className="block text-sm font-medium text-gray-700 mb-1">Carrera</label>
            <select
              id="carrera"
              name="carrera"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.carrera}
              onChange={handleChange}
            >
              <option value="">Selecciona una carrera</option>
              <option value="ISC">Sistemas Computacionales</option>
              <option value="LCD">Licenciatura en Ciencia de Datos</option>
              <option value="IIA">Inteligencia Artificial</option>
            </select>
          </div>
          <div>
            <label htmlFor="plan_estudios" className="block text-sm font-medium text-gray-700 mb-1">Plan de estudios</label>
            <select
              id="plan_estudios"
              name="plan_estudios"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              value={formData.plan_estudios}
              onChange={handleChange}
            >
              <option value="">Selecciona un plan</option>
              <option value="2009">2009</option>
              <option value="2020">2020</option>
            </select>
          </div>
          <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Áreas de conocimiento (mínimo 3)
              </label>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-2"
                onChange={handleAreaChange}
                value=""
              >
                <option value="">Selecciona un área</option>
                <option value="other">Otra área...</option>
                {areas.map(area => (
                  <option key={area.id} value={area.id}>{area.nombre}</option>
                ))}
              </select>

              {/* Popup para área personalizada */}
              {showCustomAreaPopup && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                  <div className="bg-white p-6 rounded-lg shadow-lg w-96">
                    <h3 className="text-lg font-semibold mb-4">Agregar área personalizada</h3>
                    <input
                      type="text"
                      value={customArea}
                      onChange={(e) => setCustomArea(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-4"
                      placeholder="Ingresa el nombre del área"
                    />
                    <div className="flex justify-end gap-2">
                      <button
                        type="button"
                        onClick={() => {
                          setShowCustomAreaPopup(false);
                          setCustomArea('');
                        }}
                        className="px-4 py-2 text-gray-600 hover:text-gray-800"
                      >
                        Cancelar
                      </button>
                      <button
                        type="button"
                        onClick={handleAddCustomArea}
                        className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                      >
                        Agregar
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* Mostrar áreas seleccionadas */}
              <div className="space-y-2">
                {formData.areas_ids.map(areaId => {
                  const area = areas.find(a => a.id === areaId);
                  return area ? (
                    <div key={area.id} className="flex items-center justify-between bg-blue-50 p-2 rounded">
                      <span>{area.nombre}</span>
                      <button
                        type="button"
                        onClick={() => removeArea(area.id)}
                        className="text-red-500 hover:text-red-700"
                      >
                        ×
                      </button>
                    </div>
                  ) : null;
                })}
                {formData.areas_custom.map(area => (
                  <div key={area} className="flex items-center justify-between bg-blue-50 p-2 rounded">
                    <span>{area}</span>
                    <button
                      type="button"
                      onClick={() => removeCustomArea(area)}
                      className="text-red-500 hover:text-red-700"
                    >
                      ×
                    </button>
                  </div>
                ))}
              </div>

              {areaError && (
                <p className="text-red-500 text-sm mt-1">{areaError}</p>
              )}
            </div>
          {error && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                  <span className="block sm:inline">{error}</span>
                </div>
              )}
              <button
                type="submit"
                className="w-full py-3 px-4 border border-transparent rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out"
              >
                Registrarse
              </button>
            </form>
          </>
        )}
      </div>
    </div>
  );
};

export default Register;

================
File: src/components/SideBar.tsx
================
'use client';
import React,  { useEffect, useState } from 'react';
import { usePathname } from 'next/navigation';
import Link from 'next/link';
import { FaHome, FaUser } from "react-icons/fa";
import { IoMdPaper } from "react-icons/io";
import { FaBookmark } from "react-icons/fa";
import { GoGear } from "react-icons/go";
import { AiOutlineHome, AiOutlineUser,AiOutlineQuestionCircle } from "react-icons/ai";
import { BiLogOut } from "react-icons/bi";
import Image from 'next/image';
import alumnoIcono from '../utils/alumno_icono.png';
import profesorIcono from '../utils/profesor_icono.png';



interface SidebarProps {
  isCollapsed: boolean;
}

const Sidebar: React.FC<SidebarProps> = ({ isCollapsed }) => {
  const pathname = usePathname();
  const [userType, setUserType] = useState('Usuario');
  const [userEmail, setUserEmail] = useState('');

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setUserType(localStorage.getItem('user-Type') || 'Usuario');
      setUserEmail(localStorage.getItem('userEmail') || '');
    }
  }, []);

  const isActive = (path: string) => {
    if (path === '/home') {
      return pathname === '/home' ? 'active' : '';
    }
    return pathname.startsWith(path) ? 'active' : '';
  };

  return (
    <div className={`fixed top-[64px] transition-all overflow-hidden left-0 ${isCollapsed ? 'w-16' : 'w-64'} bg-white border-secondary border-r bottom-0 z-40`} id='sidebar'>
      <Link href="/perfil" className='p-4 flex items-center gap-4 hover:bg-help3'>
      

        <Image
          src={userType === 'alumno' ? alumnoIcono : profesorIcono}
          className='w-16 aspect-square object-cover rounded'
          alt="Perfil"
        />
        {!isCollapsed && (
          <div className='sidebar-user-profile w-full'>
            <p className="text-[10px] font-medium mb-1 truncate max-w-[160px]">{userEmail}</p>
            <span className='py-1 px-2 rounded-full bg-primary text-white text-xs font-medium inline-block'>
              {userType === 'alumno' ? 'Alumno' : 'Profesor'}
            </span>
          </div>
        )}
      </Link>

      <div className='py-4'>
        <span className={`text-sm text-gray-500 uppercase ml-4 inline-block mb-2 ${isCollapsed ? 'hidden' : ''}`}>Menú</span>
        <ul className="sidebar-menu">
          <li>
            <Link href="/home" className={isActive('/home')}>
              <AiOutlineHome className='sidebar-menu-icon' /> {!isCollapsed && 'Inicio'}
            </Link>
          </li>
          <li>
            <Link href="/perfil" className={isActive('/perfil')}>
              <AiOutlineUser className='sidebar-menu-icon' /> {!isCollapsed && 'Mi Perfil'}
            </Link>
          </li>
          <li>
            <Link href="/perfil/mispropuestas" className={isActive('/perfil/mispropuestas')}>
              <IoMdPaper className='sidebar-menu-icon' /> {!isCollapsed && 'Mis Propuestas'}
            </Link>
          </li>
          {/*
           
          <li>
            <Link href="/perfil/guardados" className={isActive('/perfil/guardados')}>
              <FaBookmark className='sidebar-menu-icon' /> {!isCollapsed && 'Guardados'}
            </Link>
          </li>
          <li>
            <Link href="/perfil/configuracion" className={isActive('/perfil/configuracion')}>
              <GoGear className='sidebar-menu-icon' /> {!isCollapsed && 'Configuración'}
            </Link>
          </li>

           */}
          <li>
            <Link href="/ayuda" className={isActive('/ayuda')}>
              <AiOutlineQuestionCircle className='sidebar-menu-icon' /> {!isCollapsed && 'Ayuda'}
            </Link>
          </li>
          <li>
            <Link href="/perfil/ayuda" className={isActive('/perfil/ayuda')}>
              <BiLogOut className='sidebar-menu-icon' /> {!isCollapsed && 'Cerrar Sesión'}
            </Link>
          </li>

        </ul>
      </div>
    </div>
  );
};

export default Sidebar;

================
File: src/components/SideBarAdmin.tsx
================
'use client';
import React from "react";
import { GiFireDash } from "react-icons/gi";
import { FaTachometerAlt, FaUser, FaCog, FaChartLine, FaDollarSign, FaUsers, FaFileAlt, FaTimes } from "react-icons/fa";
import { FaBars } from "react-icons/fa6";

interface SideBarAdminProps {
  isOpen: boolean;
  toggleSideBar: () => void;
}

const menuList = [
  { icon: <FaTachometerAlt className="text-xl" />, name: "Dashboard" },
  { icon: <FaUser className="text-xl" />, name: "Profile" },
  { icon: <FaCog className="text-xl" />, name: "Settings" },
  { icon: <FaChartLine className="text-xl" />, name: "Analytics" },
  { icon: <FaDollarSign className="text-xl" />, name: "Sales Report" },
  { icon: <FaUsers className="text-xl" />, name: "Customers" },
  { icon: <FaFileAlt className="text-xl" />, name: "Invoices" },
];

const SideBarAdmin: React.FC<SideBarAdminProps> = ({ toggleSideBar, isOpen }) => {
  return (
    <div className={`bg-help3 fixed p-5 top-0 left-0 h-full flex flex-col justify-between ${isOpen ? "w-52" : "w-20"} duration-300`}>
      <div className={`${isOpen ? "" : "flex flex-col items-center justify-center"} duration-300`}>
        {/* Logo */}
        <div className="flex items-center justify-center gap-4">
          <GiFireDash className="text-3xl cursor-pointer hover:text-gray-400" />
          <h1 className={`text-2xl cursor-pointer text-oscure font-bold ${isOpen ? "" : "hidden"} duration-300`}>
            SGI<span className='text-secondary'>TT</span>
          </h1>
        </div>

        {/* Menú */}
        <nav className="mt-20">
          <ul className="flex flex-col gap-6">
            {menuList.map((item, index) => (
              <li key={index} className="flex items-center gap-3 p-2 cursor-pointer hover:bg-secondary">
                {item.icon}
                <span className={`${isOpen ? "" : "hidden"} duration-300`}>{item.name}</span>
              </li>
            ))}
          </ul>
        </nav>
      </div>

      {/* Toggle en la parte inferior */}
      <div className="mt-auto flex items-center justify-center p-3 cursor-pointer hover:bg-secondary text-2xl"
        onClick={toggleSideBar}>
        {isOpen ? <FaTimes /> : <FaBars />}
      </div>
    </div>
  );
}

export default SideBarAdmin;

================
File: src/components/SideBarProfile.tsx
================
'use client';
import React from 'react';
import { usePathname } from 'next/navigation';
import Link from 'next/link';
import { FaHome } from "react-icons/fa";
import { IoMdPaper } from "react-icons/io";
import { FaBookmark } from "react-icons/fa";
import { GoGear } from "react-icons/go";
import { AiOutlineQuestionCircle } from "react-icons/ai";

interface SideBarProfileProps {
  isCollapsed: boolean;
}

const SideBarProfile: React.FC<SideBarProfileProps> = ({ isCollapsed }) => {
  const pathname = usePathname();

  const isActive = (path: string) => {
    if (path === '/perfil') {
      return pathname === '/perfil' ? 'active' : '';
    }
    return pathname.startsWith(path) ? 'active' : '';
  };

  return (
    <div className={`fixed top-[64px] transition-all overflow-hidden left-0 ${isCollapsed ? 'w-16' : 'w-64'} bg-white border-secondary border-r bottom-0 z-40`} id='sidebar'>
      <Link href="/perfil" className='p-4 flex items-center gap-4 hover:bg-help3'>
        <img
          src="https://images.unsplash.com/photo-1726688837477-c8cbcab8e05a?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxmZWF0dXJlZC1waG90b3MtZmVlZHw1fHx8ZW58MHx8fHx8"
          className='w-16 aspect-square object-cover rounded'
          alt="Perfil"
        />
        {!isCollapsed && (
          <div className='whitespace-nowrap sidebar-user-profile'>
            <h3 className='text-lg font-semibold mb-2'>Nombre de Usuario</h3>
            <span className='py-1 px-2 rounded-full bg-primary text-white text-sm font-medium'>Alumno</span>
          </div>
        )}
      </Link>

      <div className='py-4'>
        <span className={`text-sm text-gray-500 uppercase ml-4 inline-block mb-2 ${isCollapsed ? 'hidden' : ''}`}>Menú</span>
        <ul className="sidebar-menu">
          <li>
            <Link href="/perfil" className={isActive('/perfil')}>
              <FaHome className='sidebar-menu-icon' /> {!isCollapsed && 'Inicio'}
            </Link>
          </li>
          <li>
            <Link href="/perfil/mispropuestas" className={isActive('/perfil/mispropuestas')}>
              <IoMdPaper className='sidebar-menu-icon' /> {!isCollapsed && 'Mis Propuestas'}
            </Link>
          </li>
          <li>
            <Link href="/perfil/vermastardes">
              <FaBookmark className='sidebar-menu-icon' /> {!isCollapsed && 'Ver Más Tarde'}
            </Link>
          </li>
          <li>
            <Link href="/perfil/configuracion">
              <GoGear className='sidebar-menu-icon' /> {!isCollapsed && 'Configuración'}
            </Link>
          </li>
          <li>
            <Link href="/perfil/ayuda">
              <AiOutlineQuestionCircle className='sidebar-menu-icon' /> {!isCollapsed && 'Ayuda'}
            </Link>
          </li>
        </ul>
      </div>
    </div>
  );
};

export default SideBarProfile;

================
File: src/components/TablesAdmin.tsx
================
import React, { useState, useEffect } from 'react';
import { Search, Plus, Edit2, Trash2 } from 'lucide-react';
import {
  FaSchool,
  FaChalkboardTeacher,
  FaUserGraduate,
  FaBook,
  FaFileAlt
} from 'react-icons/fa';
import { 
  fetchAdminStats, 
  fetchAdminData, 
  deleteAdminEntity,
  updateAdminEntity,
  createAdminEntity 
} from '../app/utils/adminApi';
// Tipos para las diferentes entidades
interface Propuesta {
  id: number;
  nombre: string;
  objetivo: string;
  tipo_propuesta: string;
}

interface Usuario {
  id: number;
  email: string;
  nombre: string;
  tipo: string;
}

interface Area {
  id: number;
  nombre: string;
}

interface StatsCard {
  title: string;
  value: number;
  change: number;
  icon: JSX.Element;
}

const TablesAdmin = () => {
  const [activeTab, setActiveTab] = useState<'propuestas' | 'usuarios' | 'areas'>('propuestas');
  const [searchTerm, setSearchTerm] = useState('');
  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState<StatsCard[]>([]);

  // Configuración de los CRUDs disponibles
  const cruds = [
    { 
      id: 'propuestas', 
      name: 'Propuestas', 
      icon: <FaFileAlt className="text-3xl" />,
      columns: ['ID', 'Nombre', 'Tipo', 'Objetivo', 'Acciones']
    },
    { 
      id: 'usuarios', 
      name: 'Usuarios', 
      icon: <FaUserGraduate className="text-3xl" />,
      columns: ['ID', 'Email', 'Nombre', 'Tipo', 'Acciones']
    },
    { 
      id: 'areas', 
      name: 'Áreas', 
      icon: <FaBook className="text-3xl" />,
      columns: ['ID', 'Nombre', 'Acciones']
    }
  ];

  // Estadísticas para el panel lateral
  const statsCards: StatsCard[] = [
    {
      title: "Total Propuestas",
      value: 150,
      change: 12,
      icon: <FaFileAlt className="w-6 h-6" />
    },
    {
      title: "Usuarios Activos",
      value: 320,
      change: 5,
      icon: <FaUserGraduate className="w-6 h-6" />
    },
    {
      title: "Áreas Registradas",
      value: 45,
      change: 2,
      icon: <FaBook className="w-6 h-6" />
    }
  ];

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        const [statsData, entityData] = await Promise.all([
          fetchAdminStats(),
          fetchAdminData(activeTab, searchTerm)
        ]);
        
        // Actualizar estadísticas
        const updatedStats = [
          {
            title: "Total Propuestas",
            value: statsData.propuestas.total,
            change: statsData.propuestas.growth,
            icon: <FaFileAlt className="w-6 h-6" />
          },
          {
            title: "Usuarios Activos",
            value: statsData.users.total,
            change: statsData.users.growth,
            icon: <FaUserGraduate className="w-6 h-6" />
          },
          {
            title: "Distribución Usuario",
            value: `${statsData.users.alumnos}/${statsData.users.profesores}`,
            change: 0,
            icon: <FaBook className="w-6 h-6" />
          }
        ];
        
        setStats(updatedStats);
        setData(entityData);
      } catch (error) {
        console.error('Error loading data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [activeTab, searchTerm]);

  const handleDelete = async (id: number) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await deleteAdminEntity(activeTab, id);
        // Recargar datos después de eliminar
        const newData = await fetchAdminData(activeTab, searchTerm);
        setData(newData);
      } catch (error) {
        console.error('Error deleting item:', error);
      }
    }
  };

  const filteredData = data.filter(item => {
    const searchValue = searchTerm.toLowerCase();
    return (
      item.nombre?.toLowerCase().includes(searchValue) ||
      item.email?.toLowerCase().includes(searchValue) ||
      item.tipo_propuesta?.toLowerCase().includes(searchValue)
    );
  });

  return (
    <div className="flex flex-col gap-6 p-6">
      {/* Header con búsqueda */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Administración de {activeTab}</h2>
        <div className="flex items-center gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Buscar..."
              className="pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <button className="bg-primary text-white px-4 py-2 rounded-lg flex items-center gap-2">
            <Plus size={20} />
            Nuevo
          </button>
        </div>
      </div>

      {/* Selector de CRUD */}
      <div className="grid grid-cols-3 gap-4">
        {cruds.map((crud) => (
          <button
            key={crud.id}
            onClick={() => setActiveTab(crud.id as any)}
            className={`p-4 rounded-lg flex items-center gap-4 transition-colors ${
              activeTab === crud.id 
                ? 'bg-primary text-white' 
                : 'bg-gray-100 hover:bg-gray-200'
            }`}
          >
            {crud.icon}
            <span className="font-medium">{crud.name}</span>
          </button>
        ))}
      </div>

      {/* Tabla de datos */}
      <div className="bg-white rounded-lg shadow">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                {cruds.find(c => c.id === activeTab)?.columns.map((column) => (
                  <th key={column} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    {column}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={5} className="text-center py-4">Cargando...</td>
                </tr>
              ) : filteredData.map((item) => (
                <tr key={item.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">{item.id}</td>
                  <td className="px-6 py-4">{item.nombre || item.email}</td>
                  {activeTab === 'propuestas' && (
                    <>
                      <td className="px-6 py-4">{item.tipo_propuesta}</td>
                      <td className="px-6 py-4">{item.objetivo}</td>
                    </>
                  )}
                  {activeTab === 'usuarios' && (
                    <>
                      <td className="px-6 py-4">{item.nombre}</td>
                      <td className="px-6 py-4">{item.tipo}</td>
                    </>
                  )}
                  <td className="px-6 py-4">
                    <div className="flex gap-2">
                      <button className="p-1 hover:bg-gray-100 rounded">
                        <Edit2 size={18} className="text-blue-500" />
                      </button>
                      <button 
                        className="p-1 hover:bg-gray-100 rounded"
                        onClick={() => handleDelete(item.id)}
                      >
                        <Trash2 size={18} className="text-red-500" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Panel lateral de estadísticas */}
      <div className="grid grid-cols-3 gap-4">
        {stats.map((stat, index) => (
          <div key={index} className="bg-white p-4 rounded-lg shadow">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">{stat.title}</p>
                <p className="text-2xl font-semibold">{stat.value}</p>
              </div>
              <div className={`p-3 rounded-full ${
                stat.change > 0 ? 'bg-green-100' : 'bg-red-100'
              }`}>
                {stat.icon}
              </div>
            </div>
            <div className={`mt-2 text-sm ${
              stat.change > 0 ? 'text-green-600' : 'text-red-600'
            }`}>
              {stat.change > 0 ? '+' : ''}{stat.change}% desde el último mes
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TablesAdmin;

================
File: src/components/ValorDiv.tsx
================
import React from 'react'

const ValorDiv = () => {
  return (
    <div>ValorDiv</div>
  )
}

export default ValorDiv

================
File: src/utils/propuestas.tsx
================
import { FaComputer } from "react-icons/fa6";
import { BsClipboardData } from "react-icons/bs";
import { LuBrainCircuit } from "react-icons/lu";

const sistemasLogo = <FaComputer className='w-1/6 text-oscure' />;
const datosLogo = <BsClipboardData className='w-1/6 text-oscure' />;
const iaLogo = <LuBrainCircuit className='w-1/6 text-oscure' />;

export const Propuesta = [
  {
    id: 1,
    logo: sistemasLogo,
    nombre: 'Criptografía de Curvas Elípticas',
    time: 'Ahora',
    area: 'Criptografía',
    descripcion: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quos rem amet similique corporis sint ipsa minus delectus quo magni debitis commodi eius facilis, asperiores earum, deleniti maiores unde molestias minima!',
    carrera: 'Sistemas Computacionales',
  },
  {
    id: 2,
    logo: datosLogo,
    nombre: 'Análisis de Datos con Python',
    time: 'Hace 2 días',
    area: 'Ciencia de Datos',
    descripcion: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quos rem amet similique corporis sint ipsa minus delectus quo magni debitis commodi eius facilis, asperiores earum, deleniti maiores unde molestias minima!',
    carrera: 'Ciencia de Datos',
  },
  {
    id: 3,
    logo: iaLogo,
    nombre: 'Machine Learning en Python',
    time: 'Hace 5 días',
    area: 'Machine Learning',
    descripcion: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quos rem amet similique corporis sint ipsa minus delectus quo magni debitis commodi eius facilis, asperiores earum, deleniti maiores unde molestias minima!',
    carrera: 'Inteligencia Artificial',
  },
  {
    id: 4,
    logo: sistemasLogo,
    nombre: 'Desarrollo de Software',
    time: 'Hace 1 semana',
    area: 'Desarrollo de Software',
    descripcion: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quos rem amet similique corporis sint ipsa minus delectus quo magni debitis commodi eius facilis, asperiores earum, deleniti maiores unde molestias minima!',
    carrera: 'Sistemas Computacionales',
  },
  {
    id: 5,
    logo: iaLogo,
    nombre: 'Redes Neuronales Avanzadas',
    time: 'Hace 3 días',
    area: 'Inteligencia Artificial',
    descripcion: 'Lorem ipsum dolor sit amet...',
    carrera: 'Inteligencia Artificial',
  },
  {
    id: 6,
    logo: datosLogo,
    nombre: 'Big Data con Hadoop',
    time: 'Hace 1 día',
    area: 'Ciencia de Datos',
    descripcion: 'Lorem ipsum dolor sit amet...',
    carrera: 'Ciencia de Datos',
  },
  {
    id: 7,
    logo: sistemasLogo,
    nombre: 'Desarrollo de Apps Móviles',
    time: 'Hace 2 semanas',
    area: 'Desarrollo de Software',
    descripcion: 'Lorem ipsum dolor sit amet...',
    carrera: 'Sistemas Computacionales',
  },
  {
    id: 8,
    logo: iaLogo,
    nombre: 'Visión por Computadora',
    time: 'Hace 4 días',
    area: 'Inteligencia Artificial',
    descripcion: 'Lorem ipsum dolor sit amet...',
    carrera: 'Inteligencia Artificial',
  },
  {
    id: 9,
    logo: datosLogo,
    nombre: 'Minería de Datos',
    time: 'Hace 3 semanas',
    area: 'Ciencia de Datos',
    descripcion: 'Lorem ipsum dolor sit amet...',
    carrera: 'Ciencia de Datos',
  },
];

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
      colors: {
        'primary': '#219ebc', 
        'secondary': '#8ecae6', 
        'oscure': '#023047', 
        'help1': '#FFD700', 
        'help2': '#FF8500', 
        'help3': '#E0EEF8',
      },
      lineClamp: {
        3: '3', // Esto permitirá truncar después de 3 líneas
      },
    },
  },
  daisyui: {
    themes: ["light"], // Cambia el tema por defecto a 'light'
  },
  plugins: [
    require('@tailwindcss/line-clamp'),
    require("daisyui"),
  ],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
